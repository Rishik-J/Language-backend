{
  "GitLoaderComponent": {
    "template": {
      "_type": "Component",
      "branch": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "branch",
        "value": "main",
        "display_name": "Branch",
        "advanced": false,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "The branch to load files from. Defaults to 'main'.",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "clone_url": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": false,
        "name": "clone_url",
        "value": "",
        "display_name": "Clone URL",
        "advanced": false,
        "input_types": [
          "Message"
        ],
        "dynamic": true,
        "info": "The URL of the Git repository to clone (used if 'Clone' is selected).",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "code": {
        "type": "code",
        "required": true,
        "placeholder": "",
        "list": false,
        "show": true,
        "multiline": true,
        "value": "import re\nimport tempfile\nfrom contextlib import asynccontextmanager\nfrom fnmatch import fnmatch\nfrom pathlib import Path\n\nimport anyio\nfrom langchain_community.document_loaders.git import GitLoader\n\nfrom langflow.custom import Component\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema import Data\n\n\nclass GitLoaderComponent(Component):\n    display_name = \"Git\"\n    description = (\n        \"Load and filter documents from a local or remote Git repository. \"\n        \"Use a local repo path or clone from a remote URL.\"\n    )\n    trace_type = \"tool\"\n    icon = \"GitLoader\"\n\n    inputs = [\n        DropdownInput(\n            name=\"repo_source\",\n            display_name=\"Repository Source\",\n            options=[\"Local\", \"Remote\"],\n            required=True,\n            info=\"Select whether to use a local repo path or clone from a remote URL.\",\n            real_time_refresh=True,\n        ),\n        MessageTextInput(\n            name=\"repo_path\",\n            display_name=\"Local Repository Path\",\n            required=False,\n            info=\"The local path to the existing Git repository (used if 'Local' is selected).\",\n            dynamic=True,\n            show=False,\n        ),\n        MessageTextInput(\n            name=\"clone_url\",\n            display_name=\"Clone URL\",\n            required=False,\n            info=\"The URL of the Git repository to clone (used if 'Clone' is selected).\",\n            dynamic=True,\n            show=False,\n        ),\n        MessageTextInput(\n            name=\"branch\",\n            display_name=\"Branch\",\n            required=False,\n            value=\"main\",\n            info=\"The branch to load files from. Defaults to 'main'.\",\n        ),\n        MessageTextInput(\n            name=\"file_filter\",\n            display_name=\"File Filter\",\n            required=False,\n            advanced=True,\n            info=(\n                \"Patterns to filter files. For example:\\n\"\n                \"Include only .py files: '*.py'\\n\"\n                \"Exclude .py files: '!*.py'\\n\"\n                \"Multiple patterns can be separated by commas.\"\n            ),\n        ),\n        MessageTextInput(\n            name=\"content_filter\",\n            display_name=\"Content Filter\",\n            required=False,\n            advanced=True,\n            info=\"A regex pattern to filter files based on their content.\",\n        ),\n    ]\n\n    outputs = [\n        Output(name=\"data\", display_name=\"Data\", method=\"load_documents\"),\n    ]\n\n    @staticmethod\n    def is_binary(file_path: str | Path) -> bool:\n        \"\"\"Check if a file is binary by looking for null bytes.\"\"\"\n        try:\n            with Path(file_path).open(\"rb\") as file:\n                content = file.read(1024)\n                return b\"\\x00\" in content\n        except Exception:  # noqa: BLE001\n            return True\n\n    @staticmethod\n    def check_file_patterns(file_path: str | Path, patterns: str) -> bool:\n        \"\"\"Check if a file matches the given patterns.\n\n        Args:\n            file_path: Path to the file to check\n            patterns: Comma-separated list of glob patterns\n\n        Returns:\n            bool: True if file should be included, False if excluded\n        \"\"\"\n        # Handle empty or whitespace-only patterns\n        if not patterns or patterns.isspace():\n            return True\n\n        path_str = str(file_path)\n        file_name = Path(path_str).name\n        pattern_list: list[str] = [pattern.strip() for pattern in patterns.split(\",\") if pattern.strip()]\n\n        # If no valid patterns after stripping, treat as include all\n        if not pattern_list:\n            return True\n\n        # Process exclusion patterns first\n        for pattern in pattern_list:\n            if pattern.startswith(\"!\"):\n                # For exclusions, match against both full path and filename\n                exclude_pattern = pattern[1:]\n                if fnmatch(path_str, exclude_pattern) or fnmatch(file_name, exclude_pattern):\n                    return False\n\n        # Then check inclusion patterns\n        include_patterns = [p for p in pattern_list if not p.startswith(\"!\")]\n        # If no include patterns, treat as include all\n        if not include_patterns:\n            return True\n\n        # For inclusions, match against both full path and filename\n        return any(fnmatch(path_str, pattern) or fnmatch(file_name, pattern) for pattern in include_patterns)\n\n    @staticmethod\n    def check_content_pattern(file_path: str | Path, pattern: str) -> bool:\n        \"\"\"Check if file content matches the given regex pattern.\n\n        Args:\n            file_path: Path to the file to check\n            pattern: Regex pattern to match against content\n\n        Returns:\n            bool: True if content matches, False otherwise\n        \"\"\"\n        try:\n            # Check if file is binary\n            with Path(file_path).open(\"rb\") as file:\n                content = file.read(1024)\n                if b\"\\x00\" in content:\n                    return False\n\n            # Try to compile the regex pattern first\n            try:\n                # Use the MULTILINE flag to better handle text content\n                content_regex = re.compile(pattern, re.MULTILINE)\n                # Test the pattern with a simple string to catch syntax errors\n                test_str = \"test\\nstring\"\n                if not content_regex.search(test_str):\n                    # Pattern is valid but doesn't match test string\n                    pass\n            except (re.error, TypeError, ValueError):\n                return False\n\n            # If not binary and regex is valid, check content\n            with Path(file_path).open(encoding=\"utf-8\") as file:\n                file_content = file.read()\n            return bool(content_regex.search(file_content))\n        except (OSError, UnicodeDecodeError):\n            return False\n\n    def build_combined_filter(self, file_filter_patterns: str | None = None, content_filter_pattern: str | None = None):\n        \"\"\"Build a combined filter function from file and content patterns.\n\n        Args:\n            file_filter_patterns: Comma-separated glob patterns\n            content_filter_pattern: Regex pattern for content\n\n        Returns:\n            callable: Filter function that takes a file path and returns bool\n        \"\"\"\n\n        def combined_filter(file_path: str) -> bool:\n            try:\n                path = Path(file_path)\n\n                # Check if file exists and is readable\n                if not path.exists():\n                    return False\n\n                # Check if file is binary\n                if self.is_binary(path):\n                    return False\n\n                # Apply file pattern filters\n                if file_filter_patterns and not self.check_file_patterns(path, file_filter_patterns):\n                    return False\n\n                # Apply content filter\n                return not (content_filter_pattern and not self.check_content_pattern(path, content_filter_pattern))\n            except Exception:  # noqa: BLE001\n                return False\n\n        return combined_filter\n\n    @asynccontextmanager\n    async def temp_clone_dir(self):\n        \"\"\"Context manager for handling temporary clone directory.\"\"\"\n        temp_dir = None\n        try:\n            temp_dir = tempfile.mkdtemp(prefix=\"langflow_clone_\")\n            yield temp_dir\n        finally:\n            if temp_dir:\n                await anyio.Path(temp_dir).rmdir()\n\n    def update_build_config(self, build_config: dict, field_value: str, field_name: str | None = None) -> dict:\n        # Hide fields by default\n        build_config[\"repo_path\"][\"show\"] = False\n        build_config[\"clone_url\"][\"show\"] = False\n\n        if field_name == \"repo_source\":\n            if field_value == \"Local\":\n                build_config[\"repo_path\"][\"show\"] = True\n                build_config[\"repo_path\"][\"required\"] = True\n                build_config[\"clone_url\"][\"required\"] = False\n            elif field_value == \"Remote\":\n                build_config[\"clone_url\"][\"show\"] = True\n                build_config[\"clone_url\"][\"required\"] = True\n                build_config[\"repo_path\"][\"required\"] = False\n\n        return build_config\n\n    async def build_gitloader(self) -> GitLoader:\n        file_filter_patterns = getattr(self, \"file_filter\", None)\n        content_filter_pattern = getattr(self, \"content_filter\", None)\n\n        combined_filter = self.build_combined_filter(file_filter_patterns, content_filter_pattern)\n\n        repo_source = getattr(self, \"repo_source\", None)\n        if repo_source == \"Local\":\n            repo_path = self.repo_path\n            clone_url = None\n        else:\n            # Clone source\n            clone_url = self.clone_url\n            async with self.temp_clone_dir() as temp_dir:\n                repo_path = temp_dir\n\n        # Only pass branch if it's explicitly set\n        branch = getattr(self, \"branch\", None)\n        if not branch:\n            branch = None\n\n        return GitLoader(\n            repo_path=repo_path,\n            clone_url=clone_url if repo_source == \"Remote\" else None,\n            branch=branch,\n            file_filter=combined_filter,\n        )\n\n    async def load_documents(self) -> list[Data]:\n        gitloader = await self.build_gitloader()\n        data = [Data.from_document(doc) async for doc in gitloader.alazy_load()]\n        self.status = data\n        return data\n",
        "fileTypes": [],
        "file_path": "",
        "password": false,
        "name": "code",
        "advanced": true,
        "dynamic": true,
        "info": "",
        "load_from_db": false,
        "title_case": false
      },
      "content_filter": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "content_filter",
        "value": "",
        "display_name": "Content Filter",
        "advanced": true,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "A regex pattern to filter files based on their content.",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "file_filter": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "file_filter",
        "value": "",
        "display_name": "File Filter",
        "advanced": true,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "Patterns to filter files. For example:\nInclude only .py files: '*.py'\nExclude .py files: '!*.py'\nMultiple patterns can be separated by commas.",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "repo_path": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": false,
        "name": "repo_path",
        "value": "",
        "display_name": "Local Repository Path",
        "advanced": false,
        "input_types": [
          "Message"
        ],
        "dynamic": true,
        "info": "The local path to the existing Git repository (used if 'Local' is selected).",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "repo_source": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "options": [
          "Local",
          "Remote"
        ],
        "options_metadata": [],
        "combobox": false,
        "dialog_inputs": {},
        "toggle": false,
        "required": true,
        "placeholder": "",
        "show": true,
        "name": "repo_source",
        "value": "",
        "display_name": "Repository Source",
        "advanced": false,
        "dynamic": false,
        "info": "Select whether to use a local repo path or clone from a remote URL.",
        "real_time_refresh": true,
        "title_case": false,
        "type": "str",
        "_input_type": "DropdownInput"
      }
    },
    "description": "Load and filter documents from a local or remote Git repository. Use a local repo path or clone from a remote URL.",
    "icon": "GitLoader",
    "base_classes": [
      "Data"
    ],
    "display_name": "Git",
    "documentation": "",
    "minimized": false,
    "custom_fields": {},
    "output_types": [],
    "pinned": false,
    "conditional_paths": [],
    "frozen": false,
    "outputs": [
      {
        "types": [
          "Data"
        ],
        "selected": "Data",
        "name": "data",
        "display_name": "Data",
        "method": "load_documents",
        "value": "__UNDEFINED__",
        "cache": true,
        "allows_loop": false,
        "tool_mode": true
      }
    ],
    "field_order": [
      "repo_source",
      "repo_path",
      "clone_url",
      "branch",
      "file_filter",
      "content_filter"
    ],
    "beta": false,
    "legacy": false,
    "edited": false,
    "metadata": {},
    "tool_mode": false
  },
  "GitExtractorComponent": {
    "template": {
      "_type": "Component",
      "code": {
        "type": "code",
        "required": true,
        "placeholder": "",
        "list": false,
        "show": true,
        "multiline": true,
        "value": "import os\nimport shutil\nimport tempfile\nfrom contextlib import asynccontextmanager\nfrom pathlib import Path\n\nimport aiofiles\nimport git\n\nfrom langflow.custom import Component\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass GitExtractorComponent(Component):\n    display_name = \"GitExtractor\"\n    description = \"Analyzes a Git repository and returns file contents and complete repository information\"\n    icon = \"GitLoader\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"repository_url\",\n            display_name=\"Repository URL\",\n            info=\"URL of the Git repository (e.g., https://github.com/username/repo)\",\n            value=\"\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Text-Based File Contents\",\n            name=\"text_based_file_contents\",\n            method=\"get_text_based_file_contents\",\n        ),\n        Output(display_name=\"Directory Structure\", name=\"directory_structure\", method=\"get_directory_structure\"),\n        Output(display_name=\"Repository Info\", name=\"repository_info\", method=\"get_repository_info\"),\n        Output(display_name=\"Statistics\", name=\"statistics\", method=\"get_statistics\"),\n        Output(display_name=\"Files Content\", name=\"files_content\", method=\"get_files_content\"),\n    ]\n\n    @asynccontextmanager\n    async def temp_git_repo(self):\n        \"\"\"Async context manager for temporary git repository cloning.\"\"\"\n        temp_dir = tempfile.mkdtemp()\n        try:\n            # Clone is still sync but wrapped in try/finally\n            git.Repo.clone_from(self.repository_url, temp_dir)\n            yield temp_dir\n        finally:\n            shutil.rmtree(temp_dir, ignore_errors=True)\n\n    async def get_repository_info(self) -> list[Data]:\n        try:\n            async with self.temp_git_repo() as temp_dir:\n                repo = git.Repo(temp_dir)\n                repo_info = {\n                    \"name\": self.repository_url.split(\"/\")[-1],\n                    \"url\": self.repository_url,\n                    \"default_branch\": repo.active_branch.name,\n                    \"remote_urls\": [remote.url for remote in repo.remotes],\n                    \"last_commit\": {\n                        \"hash\": repo.head.commit.hexsha,\n                        \"author\": str(repo.head.commit.author),\n                        \"message\": repo.head.commit.message.strip(),\n                        \"date\": str(repo.head.commit.committed_datetime),\n                    },\n                    \"branches\": [str(branch) for branch in repo.branches],\n                }\n                result = [Data(data=repo_info)]\n                self.status = result\n                return result\n        except git.GitError as e:\n            error_result = [Data(data={\"error\": f\"Error getting repository info: {e!s}\"})]\n            self.status = error_result\n            return error_result\n\n    async def get_statistics(self) -> list[Data]:\n        try:\n            async with self.temp_git_repo() as temp_dir:\n                total_files = 0\n                total_size = 0\n                total_lines = 0\n                binary_files = 0\n                directories = 0\n\n                for root, dirs, files in os.walk(temp_dir):\n                    total_files += len(files)\n                    directories += len(dirs)\n                    for file in files:\n                        file_path = Path(root) / file\n                        total_size += file_path.stat().st_size\n                        try:\n                            async with aiofiles.open(file_path, encoding=\"utf-8\") as f:\n                                total_lines += sum(1 for _ in await f.readlines())\n                        except UnicodeDecodeError:\n                            binary_files += 1\n\n                statistics = {\n                    \"total_files\": total_files,\n                    \"total_size_bytes\": total_size,\n                    \"total_size_kb\": round(total_size / 1024, 2),\n                    \"total_size_mb\": round(total_size / (1024 * 1024), 2),\n                    \"total_lines\": total_lines,\n                    \"binary_files\": binary_files,\n                    \"directories\": directories,\n                }\n                result = [Data(data=statistics)]\n                self.status = result\n                return result\n        except git.GitError as e:\n            error_result = [Data(data={\"error\": f\"Error calculating statistics: {e!s}\"})]\n            self.status = error_result\n            return error_result\n\n    async def get_directory_structure(self) -> Message:\n        try:\n            async with self.temp_git_repo() as temp_dir:\n                tree = [\"Directory structure:\"]\n                for root, _dirs, files in os.walk(temp_dir):\n                    level = root.replace(temp_dir, \"\").count(os.sep)\n                    indent = \"    \" * level\n                    if level == 0:\n                        tree.append(f\"\u2514\u2500\u2500 {Path(root).name}\")\n                    else:\n                        tree.append(f\"{indent}\u251c\u2500\u2500 {Path(root).name}\")\n                    subindent = \"    \" * (level + 1)\n                    tree.extend(f\"{subindent}\u251c\u2500\u2500 {f}\" for f in files)\n                directory_structure = \"\\n\".join(tree)\n                self.status = directory_structure\n                return Message(text=directory_structure)\n        except git.GitError as e:\n            error_message = f\"Error getting directory structure: {e!s}\"\n            self.status = error_message\n            return Message(text=error_message)\n\n    async def get_files_content(self) -> list[Data]:\n        try:\n            async with self.temp_git_repo() as temp_dir:\n                content_list = []\n                for root, _, files in os.walk(temp_dir):\n                    for file in files:\n                        file_path = Path(root) / file\n                        relative_path = file_path.relative_to(temp_dir)\n                        file_size = file_path.stat().st_size\n                        try:\n                            async with aiofiles.open(file_path, encoding=\"utf-8\") as f:\n                                file_content = await f.read()\n                        except UnicodeDecodeError:\n                            file_content = \"[BINARY FILE]\"\n                        content_list.append(\n                            Data(data={\"path\": str(relative_path), \"size\": file_size, \"content\": file_content})\n                        )\n                self.status = content_list\n                return content_list\n        except git.GitError as e:\n            error_result = [Data(data={\"error\": f\"Error getting files content: {e!s}\"})]\n            self.status = error_result\n            return error_result\n\n    async def get_text_based_file_contents(self) -> Message:\n        try:\n            async with self.temp_git_repo() as temp_dir:\n                content_list = [\"(Files content cropped to 300k characters, download full ingest to see more)\"]\n                total_chars = 0\n                char_limit = 300000\n\n                for root, _, files in os.walk(temp_dir):\n                    for file in files:\n                        file_path = Path(root) / file\n                        relative_path = file_path.relative_to(temp_dir)\n                        content_list.extend([\"=\" * 50, f\"File: /{relative_path}\", \"=\" * 50])\n\n                        try:\n                            async with aiofiles.open(file_path, encoding=\"utf-8\") as f:\n                                file_content = await f.read()\n                                if total_chars + len(file_content) > char_limit:\n                                    remaining_chars = char_limit - total_chars\n                                    file_content = file_content[:remaining_chars] + \"\\n... (content truncated)\"\n                                content_list.append(file_content)\n                                total_chars += len(file_content)\n                        except UnicodeDecodeError:\n                            content_list.append(\"[BINARY FILE]\")\n\n                        content_list.append(\"\")\n\n                        if total_chars >= char_limit:\n                            break\n\n                text_content = \"\\n\".join(content_list)\n                self.status = text_content\n                return Message(text=text_content)\n        except git.GitError as e:\n            error_message = f\"Error getting text-based file contents: {e!s}\"\n            self.status = error_message\n            return Message(text=error_message)\n",
        "fileTypes": [],
        "file_path": "",
        "password": false,
        "name": "code",
        "advanced": true,
        "dynamic": true,
        "info": "",
        "load_from_db": false,
        "title_case": false
      },
      "repository_url": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "repository_url",
        "value": "",
        "display_name": "Repository URL",
        "advanced": false,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "URL of the Git repository (e.g., https://github.com/username/repo)",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      }
    },
    "description": "Analyzes a Git repository and returns file contents and complete repository information",
    "icon": "GitLoader",
    "base_classes": [
      "Data",
      "Message"
    ],
    "display_name": "GitExtractor",
    "documentation": "",
    "minimized": false,
    "custom_fields": {},
    "output_types": [],
    "pinned": false,
    "conditional_paths": [],
    "frozen": false,
    "outputs": [
      {
        "types": [
          "Message"
        ],
        "selected": "Message",
        "name": "text_based_file_contents",
        "display_name": "Text-Based File Contents",
        "method": "get_text_based_file_contents",
        "value": "__UNDEFINED__",
        "cache": true,
        "allows_loop": false,
        "tool_mode": true
      },
      {
        "types": [
          "Message"
        ],
        "selected": "Message",
        "name": "directory_structure",
        "display_name": "Directory Structure",
        "method": "get_directory_structure",
        "value": "__UNDEFINED__",
        "cache": true,
        "allows_loop": false,
        "tool_mode": true
      },
      {
        "types": [
          "Data"
        ],
        "selected": "Data",
        "name": "repository_info",
        "display_name": "Repository Info",
        "method": "get_repository_info",
        "value": "__UNDEFINED__",
        "cache": true,
        "allows_loop": false,
        "tool_mode": true
      },
      {
        "types": [
          "Data"
        ],
        "selected": "Data",
        "name": "statistics",
        "display_name": "Statistics",
        "method": "get_statistics",
        "value": "__UNDEFINED__",
        "cache": true,
        "allows_loop": false,
        "tool_mode": true
      },
      {
        "types": [
          "Data"
        ],
        "selected": "Data",
        "name": "files_content",
        "display_name": "Files Content",
        "method": "get_files_content",
        "value": "__UNDEFINED__",
        "cache": true,
        "allows_loop": false,
        "tool_mode": true
      }
    ],
    "field_order": [
      "repository_url"
    ],
    "beta": false,
    "legacy": false,
    "edited": false,
    "metadata": {},
    "tool_mode": false
  }
}
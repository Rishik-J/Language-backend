{
  "needle": {
    "template": {
      "_type": "Component",
      "code": {
        "type": "code",
        "required": true,
        "placeholder": "",
        "list": false,
        "show": true,
        "multiline": true,
        "value": "from langchain_community.retrievers.needle import NeedleRetriever\n\nfrom langflow.custom.custom_component.component import Component\nfrom langflow.io import IntInput, MessageTextInput, Output, SecretStrInput\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI\n\n\nclass NeedleComponent(Component):\n    display_name = \"Needle Retriever\"\n    description = \"A retriever that uses the Needle API to search collections.\"\n    documentation = \"https://docs.needle-ai.com\"\n    icon = \"Needle\"\n    name = \"needle\"\n\n    inputs = [\n        SecretStrInput(\n            name=\"needle_api_key\",\n            display_name=\"Needle API Key\",\n            info=\"Your Needle API key.\",\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"collection_id\",\n            display_name=\"Collection ID\",\n            info=\"The ID of the Needle collection.\",\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"query\",\n            display_name=\"User Query\",\n            info=\"Enter your question here. In tool mode, you can also specify top_k parameter (min: 20).\",\n            required=True,\n            tool_mode=True,\n        ),\n        IntInput(\n            name=\"top_k\",\n            display_name=\"Top K Results\",\n            info=\"Number of search results to return (min: 20).\",\n            value=20,\n            required=True,\n        ),\n    ]\n\n    outputs = [Output(display_name=\"Result\", name=\"result\", type_=\"Message\", method=\"run\")]\n\n    def run(self) -> Message:\n        # Extract query and top_k\n        query_input = self.query\n        actual_query = query_input.get(\"query\", \"\") if isinstance(query_input, dict) else query_input\n\n        # Parse top_k from tool input or use default, always enforcing minimum of 20\n        try:\n            if isinstance(query_input, dict) and \"top_k\" in query_input:\n                agent_top_k = query_input.get(\"top_k\")\n                # Check if agent_top_k is not None before converting to int\n                top_k = max(20, int(agent_top_k)) if agent_top_k is not None else max(20, self.top_k)\n            else:\n                top_k = max(20, self.top_k)\n        except (ValueError, TypeError):\n            top_k = max(20, self.top_k)\n\n        # Validate required inputs\n        if not self.needle_api_key or not self.needle_api_key.strip():\n            error_msg = \"The Needle API key cannot be empty.\"\n            raise ValueError(error_msg)\n        if not self.collection_id or not self.collection_id.strip():\n            error_msg = \"The Collection ID cannot be empty.\"\n            raise ValueError(error_msg)\n        if not actual_query or not actual_query.strip():\n            error_msg = \"The query cannot be empty.\"\n            raise ValueError(error_msg)\n\n        try:\n            # Initialize the retriever and get documents\n            retriever = NeedleRetriever(\n                needle_api_key=self.needle_api_key,\n                collection_id=self.collection_id,\n                top_k=top_k,\n            )\n\n            docs = retriever.get_relevant_documents(actual_query)\n\n            # Format the response\n            if not docs:\n                text_content = \"No relevant documents found for the query.\"\n            else:\n                context = \"\\n\\n\".join([f\"Document {i + 1}:\\n{doc.page_content}\" for i, doc in enumerate(docs)])\n                text_content = f\"Question: {actual_query}\\n\\nContext:\\n{context}\"\n\n            # Return formatted message\n            return Message(\n                text=text_content,\n                type=\"assistant\",\n                sender=MESSAGE_SENDER_AI,\n                additional_kwargs={\n                    \"source_documents\": [{\"page_content\": doc.page_content, \"metadata\": doc.metadata} for doc in docs],\n                    \"top_k_used\": top_k,\n                },\n            )\n\n        except Exception as e:\n            error_msg = f\"Error processing query: {e!s}\"\n            raise ValueError(error_msg) from e\n",
        "fileTypes": [],
        "file_path": "",
        "password": false,
        "name": "code",
        "advanced": true,
        "dynamic": true,
        "info": "",
        "load_from_db": false,
        "title_case": false
      },
      "collection_id": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": true,
        "placeholder": "",
        "show": true,
        "name": "collection_id",
        "value": "",
        "display_name": "Collection ID",
        "advanced": false,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "The ID of the Needle collection.",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "needle_api_key": {
        "load_from_db": true,
        "required": true,
        "placeholder": "",
        "show": true,
        "name": "needle_api_key",
        "value": "",
        "display_name": "Needle API Key",
        "advanced": false,
        "input_types": [],
        "dynamic": false,
        "info": "Your Needle API key.",
        "title_case": false,
        "password": true,
        "type": "str",
        "_input_type": "SecretStrInput"
      },
      "query": {
        "tool_mode": true,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": true,
        "placeholder": "",
        "show": true,
        "name": "query",
        "value": "",
        "display_name": "User Query",
        "advanced": false,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "Enter your question here. In tool mode, you can also specify top_k parameter (min: 20).",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "top_k": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "list": false,
        "list_add_label": "Add More",
        "required": true,
        "placeholder": "",
        "show": true,
        "name": "top_k",
        "value": 20,
        "display_name": "Top K Results",
        "advanced": false,
        "dynamic": false,
        "info": "Number of search results to return (min: 20).",
        "title_case": false,
        "type": "int",
        "_input_type": "IntInput"
      }
    },
    "description": "A retriever that uses the Needle API to search collections.",
    "icon": "Needle",
    "base_classes": [
      "Message"
    ],
    "display_name": "Needle Retriever",
    "documentation": "https://docs.needle-ai.com",
    "minimized": false,
    "custom_fields": {},
    "output_types": [],
    "pinned": false,
    "conditional_paths": [],
    "frozen": false,
    "outputs": [
      {
        "types": [
          "Message"
        ],
        "selected": "Message",
        "name": "result",
        "display_name": "Result",
        "method": "run",
        "value": "__UNDEFINED__",
        "cache": true,
        "allows_loop": false,
        "tool_mode": true
      }
    ],
    "field_order": [
      "needle_api_key",
      "collection_id",
      "query",
      "top_k"
    ],
    "beta": false,
    "legacy": false,
    "edited": false,
    "metadata": {},
    "tool_mode": false
  }
}
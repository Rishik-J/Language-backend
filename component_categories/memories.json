{
  "CassandraChatMemory": {
    "template": {
      "_type": "Component",
      "cluster_kwargs": {
        "tool_mode": false,
        "trace_as_input": true,
        "list": true,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "cluster_kwargs",
        "value": {},
        "display_name": "Cluster arguments",
        "advanced": true,
        "dynamic": false,
        "info": "Optional dictionary of additional keyword arguments for the Cassandra cluster.",
        "title_case": false,
        "type": "dict",
        "_input_type": "DictInput"
      },
      "code": {
        "type": "code",
        "required": true,
        "placeholder": "",
        "list": false,
        "show": true,
        "multiline": true,
        "value": "from langflow.base.memory.model import LCChatMemoryComponent\nfrom langflow.field_typing.constants import Memory\nfrom langflow.inputs import DictInput, MessageTextInput, SecretStrInput\n\n\nclass CassandraChatMemory(LCChatMemoryComponent):\n    display_name = \"Cassandra Chat Memory\"\n    description = \"Retrieves and store chat messages from Apache Cassandra.\"\n    name = \"CassandraChatMemory\"\n    icon = \"Cassandra\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"database_ref\",\n            display_name=\"Contact Points / Astra Database ID\",\n            info=\"Contact points for the database (or AstraDB database ID)\",\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"username\", display_name=\"Username\", info=\"Username for the database (leave empty for AstraDB).\"\n        ),\n        SecretStrInput(\n            name=\"token\",\n            display_name=\"Password / AstraDB Token\",\n            info=\"User password for the database (or AstraDB token).\",\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"keyspace\",\n            display_name=\"Keyspace\",\n            info=\"Table Keyspace (or AstraDB namespace).\",\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"table_name\",\n            display_name=\"Table Name\",\n            info=\"The name of the table (or AstraDB collection) where vectors will be stored.\",\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n        DictInput(\n            name=\"cluster_kwargs\",\n            display_name=\"Cluster arguments\",\n            info=\"Optional dictionary of additional keyword arguments for the Cassandra cluster.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n\n    def build_message_history(self) -> Memory:\n        from langchain_community.chat_message_histories import CassandraChatMessageHistory\n\n        try:\n            import cassio\n        except ImportError as e:\n            msg = \"Could not import cassio integration package. Please install it with `pip install cassio`.\"\n            raise ImportError(msg) from e\n\n        from uuid import UUID\n\n        database_ref = self.database_ref\n\n        try:\n            UUID(self.database_ref)\n            is_astra = True\n        except ValueError:\n            is_astra = False\n            if \",\" in self.database_ref:\n                # use a copy because we can't change the type of the parameter\n                database_ref = self.database_ref.split(\",\")\n\n        if is_astra:\n            cassio.init(\n                database_id=database_ref,\n                token=self.token,\n                cluster_kwargs=self.cluster_kwargs,\n            )\n        else:\n            cassio.init(\n                contact_points=database_ref,\n                username=self.username,\n                password=self.token,\n                cluster_kwargs=self.cluster_kwargs,\n            )\n\n        return CassandraChatMessageHistory(\n            session_id=self.session_id,\n            table_name=self.table_name,\n            keyspace=self.keyspace,\n        )\n",
        "fileTypes": [],
        "file_path": "",
        "password": false,
        "name": "code",
        "advanced": true,
        "dynamic": true,
        "info": "",
        "load_from_db": false,
        "title_case": false
      },
      "database_ref": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": true,
        "placeholder": "",
        "show": true,
        "name": "database_ref",
        "value": "",
        "display_name": "Contact Points / Astra Database ID",
        "advanced": false,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "Contact points for the database (or AstraDB database ID)",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "keyspace": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": true,
        "placeholder": "",
        "show": true,
        "name": "keyspace",
        "value": "",
        "display_name": "Keyspace",
        "advanced": false,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "Table Keyspace (or AstraDB namespace).",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "session_id": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "session_id",
        "value": "",
        "display_name": "Session ID",
        "advanced": true,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "Session ID for the message.",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "table_name": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": true,
        "placeholder": "",
        "show": true,
        "name": "table_name",
        "value": "",
        "display_name": "Table Name",
        "advanced": false,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "The name of the table (or AstraDB collection) where vectors will be stored.",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "token": {
        "load_from_db": true,
        "required": true,
        "placeholder": "",
        "show": true,
        "name": "token",
        "value": "",
        "display_name": "Password / AstraDB Token",
        "advanced": false,
        "input_types": [],
        "dynamic": false,
        "info": "User password for the database (or AstraDB token).",
        "title_case": false,
        "password": true,
        "type": "str",
        "_input_type": "SecretStrInput"
      },
      "username": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "username",
        "value": "",
        "display_name": "Username",
        "advanced": false,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "Username for the database (leave empty for AstraDB).",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      }
    },
    "description": "Retrieves and store chat messages from Apache Cassandra.",
    "icon": "Cassandra",
    "base_classes": [
      "Memory"
    ],
    "display_name": "Cassandra Chat Memory",
    "documentation": "",
    "minimized": false,
    "custom_fields": {},
    "output_types": [],
    "pinned": false,
    "conditional_paths": [],
    "frozen": false,
    "outputs": [
      {
        "types": [
          "Memory"
        ],
        "selected": "Memory",
        "name": "memory",
        "display_name": "Memory",
        "method": "build_message_history",
        "value": "__UNDEFINED__",
        "cache": true,
        "required_inputs": [
          "database_ref",
          "keyspace",
          "table_name",
          "token"
        ],
        "allows_loop": false,
        "tool_mode": true
      }
    ],
    "field_order": [
      "database_ref",
      "username",
      "token",
      "keyspace",
      "table_name",
      "session_id",
      "cluster_kwargs"
    ],
    "beta": false,
    "legacy": false,
    "edited": false,
    "metadata": {},
    "tool_mode": false
  },
  "AstraDBChatMemory": {
    "template": {
      "_type": "Component",
      "api_endpoint": {
        "load_from_db": true,
        "required": true,
        "placeholder": "",
        "show": true,
        "name": "api_endpoint",
        "value": "ASTRA_DB_API_ENDPOINT",
        "display_name": "API Endpoint",
        "advanced": false,
        "input_types": [],
        "dynamic": false,
        "info": "API endpoint URL for the Astra DB service.",
        "title_case": false,
        "password": true,
        "type": "str",
        "_input_type": "SecretStrInput"
      },
      "code": {
        "type": "code",
        "required": true,
        "placeholder": "",
        "list": false,
        "show": true,
        "multiline": true,
        "value": "import os\n\nfrom astrapy.admin import parse_api_endpoint\n\nfrom langflow.base.memory.model import LCChatMemoryComponent\nfrom langflow.field_typing.constants import Memory\nfrom langflow.inputs import MessageTextInput, SecretStrInput, StrInput\n\n\nclass AstraDBChatMemory(LCChatMemoryComponent):\n    display_name = \"Astra DB Chat Memory\"\n    description = \"Retrieves and store chat messages from Astra DB.\"\n    name = \"AstraDBChatMemory\"\n    icon: str = \"AstraDB\"\n\n    inputs = [\n        SecretStrInput(\n            name=\"token\",\n            display_name=\"Astra DB Application Token\",\n            info=\"Authentication token for accessing Astra DB.\",\n            value=\"ASTRA_DB_APPLICATION_TOKEN\",\n            required=True,\n            advanced=os.getenv(\"ASTRA_ENHANCED\", \"false\").lower() == \"true\",\n        ),\n        SecretStrInput(\n            name=\"api_endpoint\",\n            display_name=\"API Endpoint\",\n            info=\"API endpoint URL for the Astra DB service.\",\n            value=\"ASTRA_DB_API_ENDPOINT\",\n            required=True,\n        ),\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            info=\"The name of the collection within Astra DB where the vectors will be stored.\",\n            required=True,\n        ),\n        StrInput(\n            name=\"namespace\",\n            display_name=\"Namespace\",\n            info=\"Optional namespace within Astra DB to use for the collection.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_message_history(self) -> Memory:\n        try:\n            from langchain_astradb.chat_message_histories import AstraDBChatMessageHistory\n        except ImportError as e:\n            msg = (\n                \"Could not import langchain Astra DB integration package. \"\n                \"Please install it with `pip install langchain-astradb`.\"\n            )\n            raise ImportError(msg) from e\n\n        return AstraDBChatMessageHistory(\n            session_id=self.session_id,\n            collection_name=self.collection_name,\n            token=self.token,\n            api_endpoint=self.api_endpoint,\n            namespace=self.namespace or None,\n            environment=parse_api_endpoint(self.api_endpoint).environment,\n        )\n",
        "fileTypes": [],
        "file_path": "",
        "password": false,
        "name": "code",
        "advanced": true,
        "dynamic": true,
        "info": "",
        "load_from_db": false,
        "title_case": false
      },
      "collection_name": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": true,
        "placeholder": "",
        "show": true,
        "name": "collection_name",
        "value": "",
        "display_name": "Collection Name",
        "advanced": false,
        "dynamic": false,
        "info": "The name of the collection within Astra DB where the vectors will be stored.",
        "title_case": false,
        "type": "str",
        "_input_type": "StrInput"
      },
      "namespace": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "namespace",
        "value": "",
        "display_name": "Namespace",
        "advanced": true,
        "dynamic": false,
        "info": "Optional namespace within Astra DB to use for the collection.",
        "title_case": false,
        "type": "str",
        "_input_type": "StrInput"
      },
      "session_id": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "session_id",
        "value": "",
        "display_name": "Session ID",
        "advanced": true,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "token": {
        "load_from_db": true,
        "required": true,
        "placeholder": "",
        "show": true,
        "name": "token",
        "value": "ASTRA_DB_APPLICATION_TOKEN",
        "display_name": "Astra DB Application Token",
        "advanced": false,
        "input_types": [],
        "dynamic": false,
        "info": "Authentication token for accessing Astra DB.",
        "title_case": false,
        "password": true,
        "type": "str",
        "_input_type": "SecretStrInput"
      }
    },
    "description": "Retrieves and store chat messages from Astra DB.",
    "icon": "AstraDB",
    "base_classes": [
      "Memory"
    ],
    "display_name": "Astra DB Chat Memory",
    "documentation": "",
    "minimized": false,
    "custom_fields": {},
    "output_types": [],
    "pinned": false,
    "conditional_paths": [],
    "frozen": false,
    "outputs": [
      {
        "types": [
          "Memory"
        ],
        "selected": "Memory",
        "name": "memory",
        "display_name": "Memory",
        "method": "build_message_history",
        "value": "__UNDEFINED__",
        "cache": true,
        "required_inputs": [
          "api_endpoint",
          "collection_name",
          "token"
        ],
        "allows_loop": false,
        "tool_mode": true
      }
    ],
    "field_order": [
      "token",
      "api_endpoint",
      "collection_name",
      "namespace",
      "session_id"
    ],
    "beta": false,
    "legacy": false,
    "edited": false,
    "metadata": {},
    "tool_mode": false
  },
  "ZepChatMemory": {
    "template": {
      "_type": "Component",
      "api_base_path": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "options": [
          "api/v1",
          "api/v2"
        ],
        "options_metadata": [],
        "combobox": false,
        "dialog_inputs": {},
        "toggle": false,
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "api_base_path",
        "value": "api/v1",
        "display_name": "API Base Path",
        "advanced": true,
        "dynamic": false,
        "info": "",
        "title_case": false,
        "type": "str",
        "_input_type": "DropdownInput"
      },
      "api_key": {
        "load_from_db": true,
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "api_key",
        "value": "",
        "display_name": "API Key",
        "advanced": false,
        "input_types": [],
        "dynamic": false,
        "info": "API Key for the Zep instance.",
        "title_case": false,
        "password": true,
        "type": "str",
        "_input_type": "SecretStrInput"
      },
      "code": {
        "type": "code",
        "required": true,
        "placeholder": "",
        "list": false,
        "show": true,
        "multiline": true,
        "value": "from langflow.base.memory.model import LCChatMemoryComponent\nfrom langflow.field_typing.constants import Memory\nfrom langflow.inputs import DropdownInput, MessageTextInput, SecretStrInput\n\n\nclass ZepChatMemory(LCChatMemoryComponent):\n    display_name = \"Zep Chat Memory\"\n    description = \"Retrieves and store chat messages from Zep.\"\n    name = \"ZepChatMemory\"\n    icon = \"ZepMemory\"\n    legacy = True\n\n    inputs = [\n        MessageTextInput(name=\"url\", display_name=\"Zep URL\", info=\"URL of the Zep instance.\"),\n        SecretStrInput(name=\"api_key\", display_name=\"API Key\", info=\"API Key for the Zep instance.\"),\n        DropdownInput(\n            name=\"api_base_path\",\n            display_name=\"API Base Path\",\n            options=[\"api/v1\", \"api/v2\"],\n            value=\"api/v1\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n    ]\n\n    def build_message_history(self) -> Memory:\n        try:\n            # Monkeypatch API_BASE_PATH to\n            # avoid 404\n            # This is a workaround for the local Zep instance\n            # cloud Zep works with v2\n            import zep_python.zep_client\n            from zep_python import ZepClient\n            from zep_python.langchain import ZepChatMessageHistory\n\n            zep_python.zep_client.API_BASE_PATH = self.api_base_path\n        except ImportError as e:\n            msg = \"Could not import zep-python package. Please install it with `pip install zep-python`.\"\n            raise ImportError(msg) from e\n\n        zep_client = ZepClient(api_url=self.url, api_key=self.api_key)\n        return ZepChatMessageHistory(session_id=self.session_id, zep_client=zep_client)\n",
        "fileTypes": [],
        "file_path": "",
        "password": false,
        "name": "code",
        "advanced": true,
        "dynamic": true,
        "info": "",
        "load_from_db": false,
        "title_case": false
      },
      "session_id": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "session_id",
        "value": "",
        "display_name": "Session ID",
        "advanced": true,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "Session ID for the message.",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "url": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "url",
        "value": "",
        "display_name": "Zep URL",
        "advanced": false,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "URL of the Zep instance.",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      }
    },
    "description": "Retrieves and store chat messages from Zep.",
    "icon": "ZepMemory",
    "base_classes": [
      "Memory"
    ],
    "display_name": "Zep Chat Memory",
    "documentation": "",
    "minimized": false,
    "custom_fields": {},
    "output_types": [],
    "pinned": false,
    "conditional_paths": [],
    "frozen": false,
    "outputs": [
      {
        "types": [
          "Memory"
        ],
        "selected": "Memory",
        "name": "memory",
        "display_name": "Memory",
        "method": "build_message_history",
        "value": "__UNDEFINED__",
        "cache": true,
        "required_inputs": [],
        "allows_loop": false,
        "tool_mode": true
      }
    ],
    "field_order": [
      "url",
      "api_key",
      "api_base_path",
      "session_id"
    ],
    "beta": false,
    "legacy": true,
    "edited": false,
    "metadata": {},
    "tool_mode": false
  },
  "RedisChatMemory": {
    "template": {
      "_type": "Component",
      "code": {
        "type": "code",
        "required": true,
        "placeholder": "",
        "list": false,
        "show": true,
        "multiline": true,
        "value": "from urllib import parse\n\nfrom langchain_community.chat_message_histories.redis import RedisChatMessageHistory\n\nfrom langflow.base.memory.model import LCChatMemoryComponent\nfrom langflow.field_typing.constants import Memory\nfrom langflow.inputs import IntInput, MessageTextInput, SecretStrInput, StrInput\n\n\nclass RedisIndexChatMemory(LCChatMemoryComponent):\n    display_name = \"Redis Chat Memory\"\n    description = \"Retrieves and store chat messages from Redis.\"\n    name = \"RedisChatMemory\"\n    icon = \"Redis\"\n\n    inputs = [\n        StrInput(\n            name=\"host\", display_name=\"hostname\", required=True, value=\"localhost\", info=\"IP address or hostname.\"\n        ),\n        IntInput(name=\"port\", display_name=\"port\", required=True, value=6379, info=\"Redis Port Number.\"),\n        StrInput(name=\"database\", display_name=\"database\", required=True, value=\"0\", info=\"Redis database.\"),\n        MessageTextInput(\n            name=\"username\", display_name=\"Username\", value=\"\", info=\"The Redis user name.\", advanced=True\n        ),\n        SecretStrInput(\n            name=\"password\", display_name=\"Password\", value=\"\", info=\"The password for username.\", advanced=True\n        ),\n        StrInput(name=\"key_prefix\", display_name=\"Key prefix\", info=\"Key prefix.\", advanced=True),\n        MessageTextInput(\n            name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n    ]\n\n    def build_message_history(self) -> Memory:\n        kwargs = {}\n        password: str | None = self.password\n        if self.key_prefix:\n            kwargs[\"key_prefix\"] = self.key_prefix\n        if password:\n            password = parse.quote_plus(password)\n\n        url = f\"redis://{self.username}:{self.password}@{self.host}:{self.port}/{self.database}\"\n        return RedisChatMessageHistory(session_id=self.session_id, url=url, **kwargs)\n",
        "fileTypes": [],
        "file_path": "",
        "password": false,
        "name": "code",
        "advanced": true,
        "dynamic": true,
        "info": "",
        "load_from_db": false,
        "title_case": false
      },
      "database": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": true,
        "placeholder": "",
        "show": true,
        "name": "database",
        "value": "0",
        "display_name": "database",
        "advanced": false,
        "dynamic": false,
        "info": "Redis database.",
        "title_case": false,
        "type": "str",
        "_input_type": "StrInput"
      },
      "host": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": true,
        "placeholder": "",
        "show": true,
        "name": "host",
        "value": "localhost",
        "display_name": "hostname",
        "advanced": false,
        "dynamic": false,
        "info": "IP address or hostname.",
        "title_case": false,
        "type": "str",
        "_input_type": "StrInput"
      },
      "key_prefix": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "key_prefix",
        "value": "",
        "display_name": "Key prefix",
        "advanced": true,
        "dynamic": false,
        "info": "Key prefix.",
        "title_case": false,
        "type": "str",
        "_input_type": "StrInput"
      },
      "password": {
        "load_from_db": true,
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "password",
        "value": "",
        "display_name": "Password",
        "advanced": true,
        "input_types": [],
        "dynamic": false,
        "info": "The password for username.",
        "title_case": false,
        "password": true,
        "type": "str",
        "_input_type": "SecretStrInput"
      },
      "port": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "list": false,
        "list_add_label": "Add More",
        "required": true,
        "placeholder": "",
        "show": true,
        "name": "port",
        "value": 6379,
        "display_name": "port",
        "advanced": false,
        "dynamic": false,
        "info": "Redis Port Number.",
        "title_case": false,
        "type": "int",
        "_input_type": "IntInput"
      },
      "session_id": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "session_id",
        "value": "",
        "display_name": "Session ID",
        "advanced": true,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "Session ID for the message.",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "username": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "username",
        "value": "",
        "display_name": "Username",
        "advanced": true,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "The Redis user name.",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      }
    },
    "description": "Retrieves and store chat messages from Redis.",
    "icon": "Redis",
    "base_classes": [
      "Memory"
    ],
    "display_name": "Redis Chat Memory",
    "documentation": "",
    "minimized": false,
    "custom_fields": {},
    "output_types": [],
    "pinned": false,
    "conditional_paths": [],
    "frozen": false,
    "outputs": [
      {
        "types": [
          "Memory"
        ],
        "selected": "Memory",
        "name": "memory",
        "display_name": "Memory",
        "method": "build_message_history",
        "value": "__UNDEFINED__",
        "cache": true,
        "required_inputs": [
          "database",
          "host",
          "port"
        ],
        "allows_loop": false,
        "tool_mode": true
      }
    ],
    "field_order": [
      "host",
      "port",
      "database",
      "username",
      "password",
      "key_prefix",
      "session_id"
    ],
    "beta": false,
    "legacy": false,
    "edited": false,
    "metadata": {},
    "tool_mode": false
  },
  "mem0_chat_memory": {
    "template": {
      "_type": "Component",
      "existing_memory": {
        "trace_as_metadata": true,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "existing_memory",
        "value": "",
        "display_name": "Existing Memory Instance",
        "advanced": false,
        "input_types": [
          "Memory"
        ],
        "dynamic": false,
        "info": "Optional existing Mem0 memory instance. If not provided, a new instance will be created.",
        "title_case": false,
        "type": "other",
        "_input_type": "HandleInput"
      },
      "code": {
        "type": "code",
        "required": true,
        "placeholder": "",
        "list": false,
        "show": true,
        "multiline": true,
        "value": "import logging\nimport os\n\nfrom mem0 import Memory, MemoryClient\n\nfrom langflow.base.memory.model import LCChatMemoryComponent\nfrom langflow.inputs import (\n    DictInput,\n    HandleInput,\n    MessageTextInput,\n    NestedDictInput,\n    SecretStrInput,\n)\nfrom langflow.io import Output\nfrom langflow.schema import Data\n\nlogger = logging.getLogger(__name__)\n\n\nclass Mem0MemoryComponent(LCChatMemoryComponent):\n    display_name = \"Mem0 Chat Memory\"\n    description = \"Retrieves and stores chat messages using Mem0 memory storage.\"\n    name = \"mem0_chat_memory\"\n    icon: str = \"Mem0\"\n    inputs = [\n        NestedDictInput(\n            name=\"mem0_config\",\n            display_name=\"Mem0 Configuration\",\n            info=\"\"\"Configuration dictionary for initializing Mem0 memory instance.\n                    Example:\n                    {\n                        \"graph_store\": {\n                            \"provider\": \"neo4j\",\n                            \"config\": {\n                                \"url\": \"neo4j+s://your-neo4j-url\",\n                                \"username\": \"neo4j\",\n                                \"password\": \"your-password\"\n                            }\n                        },\n                        \"version\": \"v1.1\"\n                    }\"\"\",\n            input_types=[\"Data\"],\n        ),\n        MessageTextInput(\n            name=\"ingest_message\",\n            display_name=\"Message to Ingest\",\n            info=\"The message content to be ingested into Mem0 memory.\",\n        ),\n        HandleInput(\n            name=\"existing_memory\",\n            display_name=\"Existing Memory Instance\",\n            input_types=[\"Memory\"],\n            info=\"Optional existing Mem0 memory instance. If not provided, a new instance will be created.\",\n        ),\n        MessageTextInput(\n            name=\"user_id\", display_name=\"User ID\", info=\"Identifier for the user associated with the messages.\"\n        ),\n        MessageTextInput(\n            name=\"search_query\", display_name=\"Search Query\", info=\"Input text for searching related memories in Mem0.\"\n        ),\n        SecretStrInput(\n            name=\"mem0_api_key\",\n            display_name=\"Mem0 API Key\",\n            info=\"API key for Mem0 platform. Leave empty to use the local version.\",\n        ),\n        DictInput(\n            name=\"metadata\",\n            display_name=\"Metadata\",\n            info=\"Additional metadata to associate with the ingested message.\",\n            advanced=True,\n        ),\n        SecretStrInput(\n            name=\"openai_api_key\",\n            display_name=\"OpenAI API Key\",\n            required=False,\n            info=\"API key for OpenAI. Required if using OpenAI Embeddings without a provided configuration.\",\n        ),\n    ]\n\n    outputs = [\n        Output(name=\"memory\", display_name=\"Mem0 Memory\", method=\"ingest_data\"),\n        Output(\n            name=\"search_results\",\n            display_name=\"Search Results\",\n            method=\"build_search_results\",\n        ),\n    ]\n\n    def build_mem0(self) -> Memory:\n        \"\"\"Initializes a Mem0 memory instance based on provided configuration and API keys.\"\"\"\n        if self.openai_api_key:\n            os.environ[\"OPENAI_API_KEY\"] = self.openai_api_key\n\n        try:\n            if not self.mem0_api_key:\n                return Memory.from_config(config_dict=dict(self.mem0_config)) if self.mem0_config else Memory()\n            if self.mem0_config:\n                return MemoryClient.from_config(api_key=self.mem0_api_key, config_dict=dict(self.mem0_config))\n            return MemoryClient(api_key=self.mem0_api_key)\n        except ImportError as e:\n            msg = \"Mem0 is not properly installed. Please install it with 'pip install -U mem0ai'.\"\n            raise ImportError(msg) from e\n\n    def ingest_data(self) -> Memory:\n        \"\"\"Ingests a new message into Mem0 memory and returns the updated memory instance.\"\"\"\n        mem0_memory = self.existing_memory or self.build_mem0()\n\n        if not self.ingest_message or not self.user_id:\n            logger.warning(\"Missing 'ingest_message' or 'user_id'; cannot ingest data.\")\n            return mem0_memory\n\n        metadata = self.metadata or {}\n\n        logger.info(\"Ingesting message for user_id: %s\", self.user_id)\n\n        try:\n            mem0_memory.add(self.ingest_message, user_id=self.user_id, metadata=metadata)\n        except Exception:\n            logger.exception(\"Failed to add message to Mem0 memory.\")\n            raise\n\n        return mem0_memory\n\n    def build_search_results(self) -> Data:\n        \"\"\"Searches the Mem0 memory for related messages based on the search query and returns the results.\"\"\"\n        mem0_memory = self.ingest_data()\n        search_query = self.search_query\n        user_id = self.user_id\n\n        logger.info(\"Search query: %s\", search_query)\n\n        try:\n            if search_query:\n                logger.info(\"Performing search with query.\")\n                related_memories = mem0_memory.search(query=search_query, user_id=user_id)\n            else:\n                logger.info(\"Retrieving all memories for user_id: %s\", user_id)\n                related_memories = mem0_memory.get_all(user_id=user_id)\n        except Exception:\n            logger.exception(\"Failed to retrieve related memories from Mem0.\")\n            raise\n\n        logger.info(\"Related memories retrieved: %s\", related_memories)\n        return related_memories\n",
        "fileTypes": [],
        "file_path": "",
        "password": false,
        "name": "code",
        "advanced": true,
        "dynamic": true,
        "info": "",
        "load_from_db": false,
        "title_case": false
      },
      "ingest_message": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "ingest_message",
        "value": "",
        "display_name": "Message to Ingest",
        "advanced": false,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "The message content to be ingested into Mem0 memory.",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "mem0_api_key": {
        "load_from_db": true,
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "mem0_api_key",
        "value": "",
        "display_name": "Mem0 API Key",
        "advanced": false,
        "input_types": [],
        "dynamic": false,
        "info": "API key for Mem0 platform. Leave empty to use the local version.",
        "title_case": false,
        "password": true,
        "type": "str",
        "_input_type": "SecretStrInput"
      },
      "mem0_config": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "mem0_config",
        "value": {},
        "display_name": "Mem0 Configuration",
        "advanced": false,
        "input_types": [
          "Data"
        ],
        "dynamic": false,
        "info": "Configuration dictionary for initializing Mem0 memory instance.\n                    Example:\n                    {\n                        \"graph_store\": {\n                            \"provider\": \"neo4j\",\n                            \"config\": {\n                                \"url\": \"neo4j+s://your-neo4j-url\",\n                                \"username\": \"neo4j\",\n                                \"password\": \"your-password\"\n                            }\n                        },\n                        \"version\": \"v1.1\"\n                    }",
        "title_case": false,
        "type": "NestedDict",
        "_input_type": "NestedDictInput"
      },
      "metadata": {
        "tool_mode": false,
        "trace_as_input": true,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "metadata",
        "value": {},
        "display_name": "Metadata",
        "advanced": true,
        "dynamic": false,
        "info": "Additional metadata to associate with the ingested message.",
        "title_case": false,
        "type": "dict",
        "_input_type": "DictInput"
      },
      "openai_api_key": {
        "load_from_db": true,
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "openai_api_key",
        "value": "",
        "display_name": "OpenAI API Key",
        "advanced": false,
        "input_types": [],
        "dynamic": false,
        "info": "API key for OpenAI. Required if using OpenAI Embeddings without a provided configuration.",
        "title_case": false,
        "password": true,
        "type": "str",
        "_input_type": "SecretStrInput"
      },
      "search_query": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "search_query",
        "value": "",
        "display_name": "Search Query",
        "advanced": false,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "Input text for searching related memories in Mem0.",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "user_id": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "user_id",
        "value": "",
        "display_name": "User ID",
        "advanced": false,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "Identifier for the user associated with the messages.",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      }
    },
    "description": "Retrieves and stores chat messages using Mem0 memory storage.",
    "icon": "Mem0",
    "base_classes": [
      "Data",
      "Memory"
    ],
    "display_name": "Mem0 Chat Memory",
    "documentation": "",
    "minimized": false,
    "custom_fields": {},
    "output_types": [],
    "pinned": false,
    "conditional_paths": [],
    "frozen": false,
    "outputs": [
      {
        "types": [
          "Memory"
        ],
        "selected": "Memory",
        "name": "memory",
        "display_name": "Mem0 Memory",
        "method": "ingest_data",
        "value": "__UNDEFINED__",
        "cache": true,
        "allows_loop": false,
        "tool_mode": true
      },
      {
        "types": [
          "Data"
        ],
        "selected": "Data",
        "name": "search_results",
        "display_name": "Search Results",
        "method": "build_search_results",
        "value": "__UNDEFINED__",
        "cache": true,
        "allows_loop": false,
        "tool_mode": true
      }
    ],
    "field_order": [
      "mem0_config",
      "ingest_message",
      "existing_memory",
      "user_id",
      "search_query",
      "mem0_api_key",
      "metadata",
      "openai_api_key"
    ],
    "beta": false,
    "legacy": false,
    "edited": false,
    "metadata": {},
    "tool_mode": false
  }
}
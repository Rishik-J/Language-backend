{
  "NvidiaRerankComponent": {
    "template": {
      "_type": "Component",
      "search_results": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "list": true,
        "list_add_label": "Add More",
        "trace_as_input": true,
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "search_results",
        "value": "",
        "display_name": "Search Results",
        "advanced": false,
        "input_types": [
          "Data"
        ],
        "dynamic": false,
        "info": "Search Results from a Vector Store.",
        "title_case": false,
        "type": "other",
        "_input_type": "DataInput"
      },
      "api_key": {
        "load_from_db": true,
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "api_key",
        "value": "",
        "display_name": "NVIDIA API Key",
        "advanced": false,
        "input_types": [],
        "dynamic": false,
        "info": "",
        "title_case": false,
        "password": true,
        "type": "str",
        "_input_type": "SecretStrInput"
      },
      "base_url": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "base_url",
        "value": "https://integrate.api.nvidia.com/v1",
        "display_name": "Base URL",
        "advanced": false,
        "dynamic": false,
        "info": "The base URL of the NVIDIA API. Defaults to https://integrate.api.nvidia.com/v1.",
        "refresh_button": true,
        "title_case": false,
        "type": "str",
        "_input_type": "StrInput"
      },
      "code": {
        "type": "code",
        "required": true,
        "placeholder": "",
        "list": false,
        "show": true,
        "multiline": true,
        "value": "from typing import Any\n\nfrom langflow.base.compressors.model import LCCompressorComponent\nfrom langflow.field_typing import BaseDocumentCompressor\nfrom langflow.inputs.inputs import SecretStrInput\nfrom langflow.io import DropdownInput, StrInput\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.template.field.base import Output\n\n\nclass NvidiaRerankComponent(LCCompressorComponent):\n    display_name = \"NVIDIA Rerank\"\n    description = \"Rerank documents using the NVIDIA API.\"\n    icon = \"NVIDIA\"\n\n    inputs = [\n        *LCCompressorComponent.inputs,\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"NVIDIA API Key\",\n        ),\n        StrInput(\n            name=\"base_url\",\n            display_name=\"Base URL\",\n            value=\"https://integrate.api.nvidia.com/v1\",\n            refresh_button=True,\n            info=\"The base URL of the NVIDIA API. Defaults to https://integrate.api.nvidia.com/v1.\",\n        ),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            options=[\"nv-rerank-qa-mistral-4b:1\"],\n            value=\"nv-rerank-qa-mistral-4b:1\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Reranked Documents\",\n            name=\"reranked_documents\",\n            method=\"compress_documents\",\n        ),\n    ]\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\n        if field_name == \"base_url\" and field_value:\n            try:\n                build_model = self.build_compressor()\n                ids = [model.id for model in build_model.available_models]\n                build_config[\"model\"][\"options\"] = ids\n                build_config[\"model\"][\"value\"] = ids[0]\n            except Exception as e:\n                msg = f\"Error getting model names: {e}\"\n                raise ValueError(msg) from e\n        return build_config\n\n    def build_compressor(self) -> BaseDocumentCompressor:\n        try:\n            from langchain_nvidia_ai_endpoints import NVIDIARerank\n        except ImportError as e:\n            msg = \"Please install langchain-nvidia-ai-endpoints to use the NVIDIA model.\"\n            raise ImportError(msg) from e\n        return NVIDIARerank(api_key=self.api_key, model=self.model, base_url=self.base_url, top_n=self.top_n)\n",
        "fileTypes": [],
        "file_path": "",
        "password": false,
        "name": "code",
        "advanced": true,
        "dynamic": true,
        "info": "",
        "load_from_db": false,
        "title_case": false
      },
      "model": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "options": [
          "nv-rerank-qa-mistral-4b:1"
        ],
        "options_metadata": [],
        "combobox": false,
        "dialog_inputs": {},
        "toggle": false,
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "model",
        "value": "nv-rerank-qa-mistral-4b:1",
        "display_name": "Model",
        "advanced": false,
        "dynamic": false,
        "info": "",
        "title_case": false,
        "type": "str",
        "_input_type": "DropdownInput"
      },
      "search_query": {
        "tool_mode": true,
        "trace_as_input": true,
        "multiline": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "search_query",
        "value": "",
        "display_name": "Search Query",
        "advanced": false,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "",
        "title_case": false,
        "copy_field": false,
        "type": "str",
        "_input_type": "MultilineInput"
      },
      "top_n": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "top_n",
        "value": 3,
        "display_name": "Top N",
        "advanced": true,
        "dynamic": false,
        "info": "",
        "title_case": false,
        "type": "int",
        "_input_type": "IntInput"
      }
    },
    "description": "Rerank documents using the NVIDIA API.",
    "icon": "NVIDIA",
    "base_classes": [
      "Data"
    ],
    "display_name": "NVIDIA Rerank",
    "documentation": "",
    "minimized": false,
    "custom_fields": {},
    "output_types": [],
    "pinned": false,
    "conditional_paths": [],
    "frozen": false,
    "outputs": [
      {
        "types": [
          "Data"
        ],
        "selected": "Data",
        "name": "reranked_documents",
        "display_name": "Reranked Documents",
        "method": "compress_documents",
        "value": "__UNDEFINED__",
        "cache": true,
        "allows_loop": false,
        "tool_mode": true
      }
    ],
    "field_order": [
      "search_query",
      "search_results",
      "top_n",
      "api_key",
      "base_url",
      "model"
    ],
    "beta": false,
    "legacy": false,
    "edited": false,
    "metadata": {},
    "tool_mode": false
  },
  "NvidiaIngestComponent": {
    "template": {
      "_type": "Component",
      "file_path": {
        "trace_as_metadata": true,
        "list": true,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "file_path",
        "value": "",
        "display_name": "Server File Path",
        "advanced": true,
        "input_types": [
          "Data",
          "Message"
        ],
        "dynamic": false,
        "info": "Data object with a 'file_path' property pointing to server file or a Message object with a path to the file. Supercedes 'Path' but supports same file types.",
        "title_case": false,
        "type": "other",
        "_input_type": "HandleInput"
      },
      "path": {
        "trace_as_metadata": true,
        "file_path": "",
        "fileTypes": [
          "NVIDIA Retriever Extraction (nv-ingest) dependencies missing. Please install them using your package manager. (e.g. uv pip install langflow[nv-ingest])",
          "zip",
          "tar",
          "tgz",
          "bz2",
          "gz"
        ],
        "temp_file": false,
        "list": true,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "path",
        "value": [],
        "display_name": "Files",
        "advanced": false,
        "dynamic": false,
        "info": "Supported file extensions: NVIDIA Retriever Extraction (nv-ingest) dependencies missing. Please install them using your package manager. (e.g. uv pip install langflow[nv-ingest]); optionally bundled in file extensions: zip, tar, tgz, bz2, gz",
        "title_case": false,
        "type": "file",
        "_input_type": "FileInput"
      },
      "base_url": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "base_url",
        "value": "",
        "display_name": "Base URL",
        "advanced": false,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "The URL of the NVIDIA NeMo Retriever Extraction API.",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "code": {
        "type": "code",
        "required": true,
        "placeholder": "",
        "list": false,
        "show": true,
        "multiline": true,
        "value": "from urllib.parse import urlparse\n\nfrom langflow.base.data import BaseFileComponent\nfrom langflow.io import BoolInput, DropdownInput, IntInput, MessageTextInput\nfrom langflow.schema import Data\n\n\nclass NvidiaIngestComponent(BaseFileComponent):\n    display_name = \"NVIDIA Retriever Extraction\"\n    description = \"Multi-modal data extraction from documents using NVIDIA's NeMo API.\"\n    documentation: str = \"https://docs.nvidia.com/nemo/retriever/extraction/overview/\"\n    icon = \"NVIDIA\"\n    beta = True\n\n    try:\n        from nv_ingest_client.util.file_processing.extract import EXTENSION_TO_DOCUMENT_TYPE\n\n        VALID_EXTENSIONS = list(EXTENSION_TO_DOCUMENT_TYPE.keys())\n    except ImportError:\n        msg = (\n            \"NVIDIA Retriever Extraction (nv-ingest) dependencies missing. \"\n            \"Please install them using your package manager. (e.g. uv pip install langflow[nv-ingest])\"\n        )\n        VALID_EXTENSIONS = [msg]\n\n    inputs = [\n        *BaseFileComponent._base_inputs,\n        MessageTextInput(\n            name=\"base_url\",\n            display_name=\"Base URL\",\n            info=\"The URL of the NVIDIA NeMo Retriever Extraction API.\",\n        ),\n        BoolInput(\n            name=\"extract_text\",\n            display_name=\"Extract Text\",\n            info=\"Extract text from documents\",\n            value=True,\n        ),\n        BoolInput(\n            name=\"extract_charts\",\n            display_name=\"Extract Charts\",\n            info=\"Extract text from charts\",\n            value=False,\n        ),\n        BoolInput(\n            name=\"extract_tables\",\n            display_name=\"Extract Tables\",\n            info=\"Extract text from tables\",\n            value=True,\n        ),\n        DropdownInput(\n            name=\"text_depth\",\n            display_name=\"Text Depth\",\n            info=(\n                \"Level at which text is extracted (applies before splitting). \"\n                \"Support for 'block', 'line', 'span' varies by document type.\"\n            ),\n            options=[\"document\", \"page\", \"block\", \"line\", \"span\"],\n            value=\"document\",  # Default value\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"split_text\",\n            display_name=\"Split Text\",\n            info=\"Split text into smaller chunks\",\n            value=True,\n        ),\n        DropdownInput(\n            name=\"split_by\",\n            display_name=\"Split By\",\n            info=\"How to split into chunks ('size' splits by number of characters)\",\n            options=[\"page\", \"sentence\", \"word\", \"size\"],\n            value=\"word\",  # Default value\n            advanced=True,\n        ),\n        IntInput(\n            name=\"split_length\",\n            display_name=\"Split Length\",\n            info=\"The size of each chunk based on the 'split_by' method\",\n            value=200,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"split_overlap\",\n            display_name=\"Split Overlap\",\n            info=\"Number of segments (as determined by the 'split_by' method) to overlap from previous chunk\",\n            value=20,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"max_character_length\",\n            display_name=\"Max Character Length\",\n            info=\"Maximum number of characters in each chunk\",\n            value=1000,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"sentence_window_size\",\n            display_name=\"Sentence Window Size\",\n            info=\"Number of sentences to include from previous and following chunk (when split_by='sentence')\",\n            value=0,\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        *BaseFileComponent._base_outputs,\n    ]\n\n    def process_files(self, file_list: list[BaseFileComponent.BaseFile]) -> list[BaseFileComponent.BaseFile]:\n        try:\n            from nv_ingest_client.client import Ingestor\n        except ImportError as e:\n            msg = (\n                \"NVIDIA Retriever Extraction (nv-ingest) dependencies missing. \"\n                \"Please install them using your package manager. (e.g. uv pip install langflow[nv-ingest])\"\n            )\n            raise ImportError(msg) from e\n\n        self.base_url: str | None = self.base_url.strip() if self.base_url else None\n\n        if not file_list:\n            err_msg = \"No files to process.\"\n            self.log(err_msg)\n            raise ValueError(err_msg)\n\n        file_paths = [str(file.path) for file in file_list]\n\n        try:\n            parsed_url = urlparse(self.base_url)\n            if not parsed_url.hostname or not parsed_url.port:\n                err_msg = \"Invalid URL: Missing hostname or port.\"\n                self.log(err_msg)\n                raise ValueError(err_msg)\n        except Exception as e:\n            self.log(f\"Error parsing URL: {e}\")\n            raise\n\n        self.log(\n            f\"Creating Ingestor for host: {parsed_url.hostname!r}, port: {parsed_url.port!r}\",\n        )\n        try:\n            from nv_ingest_client.client import Ingestor\n\n            ingestor = (\n                Ingestor(message_client_hostname=parsed_url.hostname, message_client_port=parsed_url.port)\n                .files(file_paths)\n                .extract(\n                    extract_text=self.extract_text,\n                    extract_tables=self.extract_tables,\n                    extract_charts=self.extract_charts,\n                    extract_images=False,  # Currently not supported\n                    text_depth=self.text_depth,\n                )\n            )\n        except Exception as e:\n            self.log(f\"Error creating Ingestor: {e}\")\n            raise\n\n        if self.split_text:\n            ingestor = ingestor.split(\n                split_by=self.split_by,\n                split_length=self.split_length,\n                split_overlap=self.split_overlap,\n                max_character_length=self.max_character_length,\n                sentence_window_size=self.sentence_window_size,\n            )\n\n        try:\n            result = ingestor.ingest()\n        except Exception as e:\n            self.log(f\"Error during ingestion: {e}\")\n            raise\n\n        self.log(f\"Results: {result}\")\n\n        data: list[Data | None] = []\n        document_type_text = \"text\"\n        document_type_structured = \"structured\"\n\n        # Result is a list of segments as determined by the text_depth option (if \"document\" then only one segment)\n        # each segment is a list of elements (text, structured, image)\n        for segment in result:\n            for element in segment:\n                document_type = element.get(\"document_type\")\n                metadata = element.get(\"metadata\", {})\n                source_metadata = metadata.get(\"source_metadata\", {})\n                content_metadata = metadata.get(\"content_metadata\", {})\n\n                if document_type == document_type_text:\n                    data.append(\n                        Data(\n                            text=metadata.get(\"content\", \"\"),\n                            file_path=source_metadata.get(\"source_name\", \"\"),\n                            document_type=document_type,\n                            description=content_metadata.get(\"description\", \"\"),\n                        )\n                    )\n                # Both charts and tables are returned as \"structured\" document type,\n                # with extracted text in \"table_content\"\n                elif document_type == document_type_structured:\n                    table_metadata = metadata.get(\"table_metadata\", {})\n                    data.append(\n                        Data(\n                            text=table_metadata.get(\"table_content\", \"\"),\n                            file_path=source_metadata.get(\"source_name\", \"\"),\n                            document_type=document_type,\n                            description=content_metadata.get(\"description\", \"\"),\n                        )\n                    )\n                else:\n                    # image is not yet supported; skip if encountered\n                    self.log(f\"Unsupported document type: {document_type}\")\n\n        self.status = data or \"No data\"\n\n        # merge processed data with BaseFile objects\n        return self.rollup_data(file_list, data)\n",
        "fileTypes": [],
        "file_path": "",
        "password": false,
        "name": "code",
        "advanced": true,
        "dynamic": true,
        "info": "",
        "load_from_db": false,
        "title_case": false
      },
      "delete_server_file_after_processing": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "delete_server_file_after_processing",
        "value": true,
        "display_name": "Delete Server File After Processing",
        "advanced": true,
        "dynamic": false,
        "info": "If true, the Server File Path will be deleted after processing.",
        "title_case": false,
        "type": "bool",
        "_input_type": "BoolInput"
      },
      "extract_charts": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "extract_charts",
        "value": false,
        "display_name": "Extract Charts",
        "advanced": false,
        "dynamic": false,
        "info": "Extract text from charts",
        "title_case": false,
        "type": "bool",
        "_input_type": "BoolInput"
      },
      "extract_tables": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "extract_tables",
        "value": true,
        "display_name": "Extract Tables",
        "advanced": false,
        "dynamic": false,
        "info": "Extract text from tables",
        "title_case": false,
        "type": "bool",
        "_input_type": "BoolInput"
      },
      "extract_text": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "extract_text",
        "value": true,
        "display_name": "Extract Text",
        "advanced": false,
        "dynamic": false,
        "info": "Extract text from documents",
        "title_case": false,
        "type": "bool",
        "_input_type": "BoolInput"
      },
      "ignore_unspecified_files": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "ignore_unspecified_files",
        "value": false,
        "display_name": "Ignore Unspecified Files",
        "advanced": true,
        "dynamic": false,
        "info": "If true, Data with no 'file_path' property will be ignored.",
        "title_case": false,
        "type": "bool",
        "_input_type": "BoolInput"
      },
      "ignore_unsupported_extensions": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "ignore_unsupported_extensions",
        "value": true,
        "display_name": "Ignore Unsupported Extensions",
        "advanced": true,
        "dynamic": false,
        "info": "If true, files with unsupported extensions will not be processed.",
        "title_case": false,
        "type": "bool",
        "_input_type": "BoolInput"
      },
      "max_character_length": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "max_character_length",
        "value": 1000,
        "display_name": "Max Character Length",
        "advanced": true,
        "dynamic": false,
        "info": "Maximum number of characters in each chunk",
        "title_case": false,
        "type": "int",
        "_input_type": "IntInput"
      },
      "sentence_window_size": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "sentence_window_size",
        "value": 0,
        "display_name": "Sentence Window Size",
        "advanced": true,
        "dynamic": false,
        "info": "Number of sentences to include from previous and following chunk (when split_by='sentence')",
        "title_case": false,
        "type": "int",
        "_input_type": "IntInput"
      },
      "separator": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "separator",
        "value": "\n\n",
        "display_name": "Separator",
        "advanced": true,
        "dynamic": false,
        "info": "Specify the separator to use between multiple outputs in Message format.",
        "title_case": false,
        "type": "str",
        "_input_type": "StrInput"
      },
      "silent_errors": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "silent_errors",
        "value": false,
        "display_name": "Silent Errors",
        "advanced": true,
        "dynamic": false,
        "info": "If true, errors will not raise an exception.",
        "title_case": false,
        "type": "bool",
        "_input_type": "BoolInput"
      },
      "split_by": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "options": [
          "page",
          "sentence",
          "word",
          "size"
        ],
        "options_metadata": [],
        "combobox": false,
        "dialog_inputs": {},
        "toggle": false,
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "split_by",
        "value": "word",
        "display_name": "Split By",
        "advanced": true,
        "dynamic": false,
        "info": "How to split into chunks ('size' splits by number of characters)",
        "title_case": false,
        "type": "str",
        "_input_type": "DropdownInput"
      },
      "split_length": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "split_length",
        "value": 200,
        "display_name": "Split Length",
        "advanced": true,
        "dynamic": false,
        "info": "The size of each chunk based on the 'split_by' method",
        "title_case": false,
        "type": "int",
        "_input_type": "IntInput"
      },
      "split_overlap": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "split_overlap",
        "value": 20,
        "display_name": "Split Overlap",
        "advanced": true,
        "dynamic": false,
        "info": "Number of segments (as determined by the 'split_by' method) to overlap from previous chunk",
        "title_case": false,
        "type": "int",
        "_input_type": "IntInput"
      },
      "split_text": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "split_text",
        "value": true,
        "display_name": "Split Text",
        "advanced": false,
        "dynamic": false,
        "info": "Split text into smaller chunks",
        "title_case": false,
        "type": "bool",
        "_input_type": "BoolInput"
      },
      "text_depth": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "options": [
          "document",
          "page",
          "block",
          "line",
          "span"
        ],
        "options_metadata": [],
        "combobox": false,
        "dialog_inputs": {},
        "toggle": false,
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "text_depth",
        "value": "document",
        "display_name": "Text Depth",
        "advanced": true,
        "dynamic": false,
        "info": "Level at which text is extracted (applies before splitting). Support for 'block', 'line', 'span' varies by document type.",
        "title_case": false,
        "type": "str",
        "_input_type": "DropdownInput"
      }
    },
    "description": "Multi-modal data extraction from documents using NVIDIA's NeMo API.",
    "icon": "NVIDIA",
    "base_classes": [
      "Data",
      "DataFrame",
      "Message"
    ],
    "display_name": "NVIDIA Retriever Extraction",
    "documentation": "https://docs.nvidia.com/nemo/retriever/extraction/overview/",
    "minimized": false,
    "custom_fields": {},
    "output_types": [],
    "pinned": false,
    "conditional_paths": [],
    "frozen": false,
    "outputs": [
      {
        "types": [
          "Data"
        ],
        "selected": "Data",
        "name": "data",
        "display_name": "Data",
        "method": "load_files",
        "value": "__UNDEFINED__",
        "cache": true,
        "required_inputs": [],
        "allows_loop": false,
        "tool_mode": true
      },
      {
        "types": [
          "DataFrame"
        ],
        "selected": "DataFrame",
        "name": "dataframe",
        "display_name": "DataFrame",
        "method": "load_dataframe",
        "value": "__UNDEFINED__",
        "cache": true,
        "required_inputs": [],
        "allows_loop": false,
        "tool_mode": true
      },
      {
        "types": [
          "Message"
        ],
        "selected": "Message",
        "name": "message",
        "display_name": "Message",
        "method": "load_message",
        "value": "__UNDEFINED__",
        "cache": true,
        "required_inputs": [],
        "allows_loop": false,
        "tool_mode": true
      }
    ],
    "field_order": [
      "path",
      "file_path",
      "separator",
      "silent_errors",
      "delete_server_file_after_processing",
      "ignore_unsupported_extensions",
      "ignore_unspecified_files",
      "base_url",
      "extract_text",
      "extract_charts",
      "extract_tables",
      "text_depth",
      "split_text",
      "split_by",
      "split_length",
      "split_overlap",
      "max_character_length",
      "sentence_window_size"
    ],
    "beta": true,
    "legacy": false,
    "edited": false,
    "metadata": {},
    "tool_mode": false
  }
}
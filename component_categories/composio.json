{
  "GmailAPI": {
    "template": {
      "_type": "Component",
      "attachment": {
        "trace_as_metadata": true,
        "file_path": "",
        "fileTypes": [
          "csv",
          "txt",
          "doc",
          "docx",
          "xls",
          "xlsx",
          "pdf",
          "png",
          "jpg",
          "jpeg",
          "gif",
          "zip",
          "rar",
          "ppt",
          "pptx"
        ],
        "temp_file": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": false,
        "name": "attachment",
        "value": "",
        "display_name": "Add Attachment",
        "advanced": false,
        "dynamic": false,
        "info": "Add an attachment",
        "title_case": false,
        "type": "file",
        "_input_type": "FileInput"
      },
      "action": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "helper_text": "Please connect before selecting actions.",
        "helper_text_metadata": {
          "variant": "destructive"
        },
        "search_category": [],
        "options": [],
        "limit": 1,
        "required": false,
        "placeholder": "Select action",
        "show": true,
        "name": "action",
        "value": "disabled",
        "display_name": "Action",
        "advanced": false,
        "dynamic": false,
        "info": "",
        "real_time_refresh": true,
        "title_case": false,
        "type": "sortableList",
        "_input_type": "SortableListInput"
      },
      "api_key": {
        "load_from_db": true,
        "required": true,
        "placeholder": "",
        "show": true,
        "name": "api_key",
        "value": "COMPOSIO_API_KEY",
        "display_name": "Composio API Key",
        "advanced": false,
        "input_types": [],
        "dynamic": false,
        "info": "",
        "real_time_refresh": true,
        "title_case": false,
        "password": true,
        "type": "str",
        "_input_type": "SecretStrInput"
      },
      "attachment_id": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": true,
        "placeholder": "",
        "show": false,
        "name": "attachment_id",
        "value": "",
        "display_name": "Attachment ID",
        "advanced": false,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "Id of the attachment",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "auth_link": {
        "trace_as_metadata": true,
        "auth_tooltip": "Please insert a valid Composio API Key.",
        "required": false,
        "placeholder": "",
        "show": false,
        "name": "auth_link",
        "value": "",
        "advanced": false,
        "dynamic": false,
        "info": "",
        "title_case": false,
        "type": "auth",
        "_input_type": "AuthInput"
      },
      "bcc": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": false,
        "name": "bcc",
        "value": "",
        "display_name": "BCC",
        "advanced": true,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "Email addresses to BCC (Blind Carbon Copy) in the email, separated by commas",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "body": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": true,
        "placeholder": "",
        "show": false,
        "name": "body",
        "value": "",
        "display_name": "Body",
        "advanced": false,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "Content of the email",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "cc": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": false,
        "name": "cc",
        "value": "",
        "display_name": "CC",
        "advanced": true,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "Email addresses to CC (Carbon Copy) in the email, separated by commas",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "code": {
        "type": "code",
        "required": true,
        "placeholder": "",
        "list": false,
        "show": true,
        "multiline": true,
        "value": "import json\nfrom typing import Any\n\nfrom composio import Action\n\nfrom langflow.base.composio.composio_base import ComposioBaseComponent\nfrom langflow.inputs import (\n    BoolInput,\n    FileInput,\n    IntInput,\n    MessageTextInput,\n)\nfrom langflow.logging import logger\n\n\nclass ComposioGmailAPIComponent(ComposioBaseComponent):\n    \"\"\"Gmail API component for interacting with Gmail services.\"\"\"\n\n    display_name: str = \"Gmail\"\n    name = \"GmailAPI\"\n    icon = \"Google\"\n    documentation: str = \"https://docs.composio.dev\"\n    app_name = \"gmail\"\n\n    # Gmail-specific actions\n    _actions_data: dict = {\n        \"GMAIL_SEND_EMAIL\": {\n            \"display_name\": \"Send Email\",\n            \"action_fields\": [\n                \"recipient_email\",\n                \"subject\",\n                \"body\",\n                \"cc\",\n                \"bcc\",\n                \"is_html\",\n                \"gmail_user_id\",\n                \"attachment\",\n            ],\n        },\n        \"GMAIL_FETCH_EMAILS\": {\n            \"display_name\": \"Fetch Emails\",\n            \"action_fields\": [\n                \"gmail_user_id\",\n                \"max_results\",\n                \"query\",\n                \"page_token\",\n                \"label_ids\",\n                \"include_spam_trash\",\n            ],\n            \"get_result_field\": True,\n            \"result_field\": \"messages\",\n        },\n        \"GMAIL_GET_PROFILE\": {\n            \"display_name\": \"Get User Profile\",\n            \"action_fields\": [\"gmail_user_id\"],\n        },\n        \"GMAIL_FETCH_MESSAGE_BY_MESSAGE_ID\": {\n            \"display_name\": \"Get Email By ID\",\n            \"action_fields\": [\"message_id\", \"gmail_user_id\", \"format\"],\n            \"get_result_field\": False,\n        },\n        \"GMAIL_CREATE_EMAIL_DRAFT\": {\n            \"display_name\": \"Create Draft Email\",\n            \"action_fields\": [\n                \"recipient_email\",\n                \"subject\",\n                \"body\",\n                \"cc\",\n                \"bcc\",\n                \"is_html\",\n                \"attachment\",\n                \"gmail_user_id\",\n            ],\n        },\n        \"GMAIL_FETCH_MESSAGE_BY_THREAD_ID\": {\n            \"display_name\": \"Get Message By Thread ID\",\n            \"action_fields\": [\"thread_id\", \"page_token\", \"gmail_user_id\"],\n            \"get_result_field\": False,\n        },\n        \"GMAIL_LIST_THREADS\": {\n            \"display_name\": \"List Email Threads\",\n            \"action_fields\": [\"max_results\", \"query\", \"gmail_user_id\", \"page_token\"],\n        },\n        \"GMAIL_REPLY_TO_THREAD\": {\n            \"display_name\": \"Reply To Thread\",\n            \"action_fields\": [\"thread_id\", \"message_body\", \"recipient_email\", \"gmail_user_id\", \"cc\", \"bcc\", \"is_html\"],\n        },\n        \"GMAIL_LIST_LABELS\": {\n            \"display_name\": \"List Email Labels\",\n            \"action_fields\": [\"gmail_user_id\"],\n        },\n        \"GMAIL_CREATE_LABEL\": {\n            \"display_name\": \"Create Email Label\",\n            \"action_fields\": [\"label_name\", \"label_list_visibility\", \"message_list_visibility\", \"gmail_user_id\"],\n        },\n        \"GMAIL_GET_PEOPLE\": {\n            \"display_name\": \"Get Contacts\",\n            \"action_fields\": [\"resource_name\", \"person_fields\"],\n        },\n        \"GMAIL_REMOVE_LABEL\": {\n            \"display_name\": \"Delete Email Label\",\n            \"action_fields\": [\"label_id\", \"gmail_user_id\"],\n            \"get_result_field\": False,\n        },\n        \"GMAIL_GET_ATTACHMENT\": {\n            \"display_name\": \"Get Attachment\",\n            \"action_fields\": [\"message_id\", \"attachment_id\", \"file_name\", \"gmail_user_id\"],\n        },\n    }\n    _all_fields = {field for action_data in _actions_data.values() for field in action_data[\"action_fields\"]}\n    _bool_variables = {\"is_html\", \"include_spam_trash\"}\n\n    # Combine base inputs with Gmail-specific inputs\n    inputs = [\n        *ComposioBaseComponent._base_inputs,\n        # Email composition fields\n        MessageTextInput(\n            name=\"recipient_email\",\n            display_name=\"Recipient Email\",\n            info=\"Email address of the recipient\",\n            show=False,\n            required=True,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"subject\",\n            display_name=\"Subject\",\n            info=\"Subject of the email\",\n            show=False,\n            required=True,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"body\",\n            display_name=\"Body\",\n            required=True,\n            info=\"Content of the email\",\n            show=False,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"cc\",\n            display_name=\"CC\",\n            info=\"Email addresses to CC (Carbon Copy) in the email, separated by commas\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"bcc\",\n            display_name=\"BCC\",\n            info=\"Email addresses to BCC (Blind Carbon Copy) in the email, separated by commas\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"is_html\",\n            display_name=\"Is HTML\",\n            info=\"Specify whether the email body contains HTML content (true/false)\",\n            show=False,\n            value=False,\n            advanced=True,\n        ),\n        # Email retrieval and management fields\n        MessageTextInput(\n            name=\"gmail_user_id\",\n            display_name=\"User ID\",\n            info=\"The user's email address or 'me' for the authenticated user\",\n            show=False,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"max_results\",\n            display_name=\"Max Results\",\n            required=True,\n            info=\"Maximum number of emails to be returned\",\n            show=False,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"message_id\",\n            display_name=\"Message ID\",\n            info=\"The ID of the specific email message\",\n            show=False,\n            required=True,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"thread_id\",\n            display_name=\"Thread ID\",\n            info=\"The ID of the email thread\",\n            show=False,\n            required=True,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"query\",\n            display_name=\"Query\",\n            info=\"Search query to filter emails (e.g., 'from:someone@email.com' or 'subject:hello')\",\n            show=False,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"message_body\",\n            display_name=\"Message Body\",\n            info=\"The body content of the message to be sent\",\n            show=False,\n            advanced=True,\n        ),\n        # Label management fields\n        MessageTextInput(\n            name=\"label_name\",\n            display_name=\"Label Name\",\n            info=\"Name of the Gmail label to create, modify, or filter by\",\n            show=False,\n            required=True,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"label_id\",\n            display_name=\"Label ID\",\n            info=\"The ID of the Gmail label\",\n            show=False,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"label_ids\",\n            display_name=\"Label Ids\",\n            info=\"Comma-separated list of label IDs to filter messages\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"label_list_visibility\",\n            display_name=\"Label List Visibility\",\n            info=\"The visibility of the label in the label list in the Gmail web interface\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"message_list_visibility\",\n            display_name=\"Message List Visibility\",\n            info=\"The visibility of the label in the message list in the Gmail web interface\",\n            show=False,\n            advanced=True,\n        ),\n        # Pagination and filtering\n        MessageTextInput(\n            name=\"page_token\",\n            display_name=\"Page Token\",\n            info=\"Token for retrieving the next page of results\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"include_spam_trash\",\n            display_name=\"Include messages from Spam/Trash\",\n            info=\"Include messages from SPAM and TRASH in the results\",\n            show=False,\n            value=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"format\",\n            display_name=\"Format\",\n            info=\"The format to return the message in. Possible values: minimal, full, raw, metadata\",\n            show=False,\n            advanced=True,\n        ),\n        # Contact management fields\n        MessageTextInput(\n            name=\"resource_name\",\n            display_name=\"Resource Name\",\n            info=\"The resource name of the person to provide information about\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"person_fields\",\n            display_name=\"Person fields\",\n            info=\"Fields to return for the person. Multiple fields can be specified by separating them with commas\",\n            show=False,\n            advanced=True,\n        ),\n        # Attachment handling\n        MessageTextInput(\n            name=\"attachment_id\",\n            display_name=\"Attachment ID\",\n            info=\"Id of the attachment\",\n            show=False,\n            required=True,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"file_name\",\n            display_name=\"File name\",\n            info=\"File name of the attachment file\",\n            show=False,\n            required=True,\n            advanced=False,\n        ),\n        FileInput(\n            name=\"attachment\",\n            display_name=\"Add Attachment\",\n            file_types=[\n                \"csv\",\n                \"txt\",\n                \"doc\",\n                \"docx\",\n                \"xls\",\n                \"xlsx\",\n                \"pdf\",\n                \"png\",\n                \"jpg\",\n                \"jpeg\",\n                \"gif\",\n                \"zip\",\n                \"rar\",\n                \"ppt\",\n                \"pptx\",\n            ],\n            info=\"Add an attachment\",\n            show=False,\n        ),\n    ]\n\n    def execute_action(self):\n        \"\"\"Execute action and return response as Message.\"\"\"\n        toolset = self._build_wrapper()\n\n        try:\n            self._build_action_maps()\n            # Get the display name from the action list\n            display_name = self.action[0][\"name\"] if isinstance(self.action, list) and self.action else self.action\n            # Use the display_to_key_map to get the action key\n            action_key = self._display_to_key_map.get(display_name)\n            if not action_key:\n                msg = f\"Invalid action: {display_name}\"\n                raise ValueError(msg)\n\n            enum_name = getattr(Action, action_key)\n            params = {}\n            if action_key in self._actions_data:\n                for field in self._actions_data[action_key][\"action_fields\"]:\n                    value = getattr(self, field)\n\n                    if value is None or value == \"\":\n                        continue\n\n                    if field in [\"cc\", \"bcc\", \"label_ids\"] and value:\n                        value = [item.strip() for item in value.split(\",\")]\n\n                    if field in self._bool_variables:\n                        value = bool(value)\n\n                    params[field] = value\n\n            if params.get(\"gmail_user_id\"):\n                params[\"user_id\"] = params.pop(\"gmail_user_id\")\n\n            result = toolset.execute_action(\n                action=enum_name,\n                params=params,\n            )\n            if not result.get(\"successful\"):\n                message_str = result.get(\"data\", {}).get(\"message\", \"{}\")\n                try:\n                    error_data = json.loads(message_str).get(\"error\", {})\n                except json.JSONDecodeError:\n                    error_data = {\"error\": \"Failed to get exact error details\"}\n                return {\n                    \"code\": error_data.get(\"code\"),\n                    \"message\": error_data.get(\"message\"),\n                    \"errors\": error_data.get(\"errors\", []),\n                    \"status\": error_data.get(\"status\"),\n                }\n\n            result_data = result.get(\"data\", [])\n            if (\n                len(result_data) != 1\n                and not self._actions_data.get(action_key, {}).get(\"result_field\")\n                and self._actions_data.get(action_key, {}).get(\"get_result_field\")\n            ):\n                msg = f\"Expected a dict with a single key, got {len(result_data)} keys: {result_data.keys()}\"\n                raise ValueError(msg)\n            return result_data  # noqa: TRY300\n        except Exception as e:\n            logger.error(f\"Error executing action: {e}\")\n            display_name = self.action[0][\"name\"] if isinstance(self.action, list) and self.action else str(self.action)\n            msg = f\"Failed to execute {display_name}: {e!s}\"\n            raise ValueError(msg) from e\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:\n        return super().update_build_config(build_config, field_value, field_name)\n\n    def set_default_tools(self):\n        self._default_tools = {\n            self.sanitize_action_name(\"GMAIL_SEND_EMAIL\").replace(\" \", \"-\"),\n            self.sanitize_action_name(\"GMAIL_FETCH_EMAILS\").replace(\" \", \"-\"),\n        }\n",
        "fileTypes": [],
        "file_path": "",
        "password": false,
        "name": "code",
        "advanced": true,
        "dynamic": true,
        "info": "",
        "load_from_db": false,
        "title_case": false
      },
      "entity_id": {
        "tool_mode": true,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "entity_id",
        "value": "default",
        "display_name": "Entity ID",
        "advanced": true,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "file_name": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": true,
        "placeholder": "",
        "show": false,
        "name": "file_name",
        "value": "",
        "display_name": "File name",
        "advanced": false,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "File name of the attachment file",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "format": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": false,
        "name": "format",
        "value": "",
        "display_name": "Format",
        "advanced": true,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "The format to return the message in. Possible values: minimal, full, raw, metadata",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "gmail_user_id": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": false,
        "name": "gmail_user_id",
        "value": "",
        "display_name": "User ID",
        "advanced": true,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "The user's email address or 'me' for the authenticated user",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "include_spam_trash": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": false,
        "name": "include_spam_trash",
        "value": false,
        "display_name": "Include messages from Spam/Trash",
        "advanced": true,
        "dynamic": false,
        "info": "Include messages from SPAM and TRASH in the results",
        "title_case": false,
        "type": "bool",
        "_input_type": "BoolInput"
      },
      "is_html": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": false,
        "name": "is_html",
        "value": false,
        "display_name": "Is HTML",
        "advanced": true,
        "dynamic": false,
        "info": "Specify whether the email body contains HTML content (true/false)",
        "title_case": false,
        "type": "bool",
        "_input_type": "BoolInput"
      },
      "label_id": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": false,
        "name": "label_id",
        "value": "",
        "display_name": "Label ID",
        "advanced": false,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "The ID of the Gmail label",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "label_ids": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": false,
        "name": "label_ids",
        "value": "",
        "display_name": "Label Ids",
        "advanced": true,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "Comma-separated list of label IDs to filter messages",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "label_list_visibility": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": false,
        "name": "label_list_visibility",
        "value": "",
        "display_name": "Label List Visibility",
        "advanced": true,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "The visibility of the label in the label list in the Gmail web interface",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "label_name": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": true,
        "placeholder": "",
        "show": false,
        "name": "label_name",
        "value": "",
        "display_name": "Label Name",
        "advanced": false,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "Name of the Gmail label to create, modify, or filter by",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "max_results": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "list": false,
        "list_add_label": "Add More",
        "required": true,
        "placeholder": "",
        "show": false,
        "name": "max_results",
        "value": "",
        "display_name": "Max Results",
        "advanced": false,
        "dynamic": false,
        "info": "Maximum number of emails to be returned",
        "title_case": false,
        "type": "int",
        "_input_type": "IntInput"
      },
      "message_body": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": false,
        "name": "message_body",
        "value": "",
        "display_name": "Message Body",
        "advanced": true,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "The body content of the message to be sent",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "message_id": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": true,
        "placeholder": "",
        "show": false,
        "name": "message_id",
        "value": "",
        "display_name": "Message ID",
        "advanced": false,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "The ID of the specific email message",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "message_list_visibility": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": false,
        "name": "message_list_visibility",
        "value": "",
        "display_name": "Message List Visibility",
        "advanced": true,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "The visibility of the label in the message list in the Gmail web interface",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "page_token": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": false,
        "name": "page_token",
        "value": "",
        "display_name": "Page Token",
        "advanced": true,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "Token for retrieving the next page of results",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "person_fields": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": false,
        "name": "person_fields",
        "value": "",
        "display_name": "Person fields",
        "advanced": true,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "Fields to return for the person. Multiple fields can be specified by separating them with commas",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "query": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": false,
        "name": "query",
        "value": "",
        "display_name": "Query",
        "advanced": false,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "Search query to filter emails (e.g., 'from:someone@email.com' or 'subject:hello')",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "recipient_email": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": true,
        "placeholder": "",
        "show": false,
        "name": "recipient_email",
        "value": "",
        "display_name": "Recipient Email",
        "advanced": false,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "Email address of the recipient",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "resource_name": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": false,
        "name": "resource_name",
        "value": "",
        "display_name": "Resource Name",
        "advanced": true,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "The resource name of the person to provide information about",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "subject": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": true,
        "placeholder": "",
        "show": false,
        "name": "subject",
        "value": "",
        "display_name": "Subject",
        "advanced": false,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "Subject of the email",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "thread_id": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": true,
        "placeholder": "",
        "show": false,
        "name": "thread_id",
        "value": "",
        "display_name": "Thread ID",
        "advanced": false,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "The ID of the email thread",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      }
    },
    "icon": "Google",
    "base_classes": [
      "DataFrame"
    ],
    "display_name": "Gmail",
    "documentation": "https://docs.composio.dev",
    "minimized": false,
    "custom_fields": {},
    "output_types": [],
    "pinned": false,
    "conditional_paths": [],
    "frozen": false,
    "outputs": [
      {
        "types": [
          "DataFrame"
        ],
        "selected": "DataFrame",
        "name": "dataFrame",
        "display_name": "DataFrame",
        "method": "as_dataframe",
        "value": "__UNDEFINED__",
        "cache": true,
        "required_inputs": [],
        "allows_loop": false,
        "tool_mode": true
      }
    ],
    "field_order": [
      "entity_id",
      "api_key",
      "auth_link",
      "action",
      "recipient_email",
      "subject",
      "body",
      "cc",
      "bcc",
      "is_html",
      "gmail_user_id",
      "max_results",
      "message_id",
      "thread_id",
      "query",
      "message_body",
      "label_name",
      "label_id",
      "label_ids",
      "label_list_visibility",
      "message_list_visibility",
      "page_token",
      "include_spam_trash",
      "format",
      "resource_name",
      "person_fields",
      "attachment_id",
      "file_name",
      "attachment"
    ],
    "beta": false,
    "legacy": false,
    "edited": false,
    "metadata": {},
    "tool_mode": false
  },
  "ComposioAPI": {
    "template": {
      "_type": "Component",
      "actions": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "helper_text": "Please connect before selecting actions.",
        "helper_text_metadata": {
          "icon": "OctagonAlert",
          "variant": "destructive"
        },
        "search_category": [],
        "options": [],
        "limit": 1,
        "required": false,
        "placeholder": "Select action",
        "show": false,
        "name": "actions",
        "value": "",
        "display_name": "Actions",
        "advanced": false,
        "dynamic": false,
        "info": "The actions to use",
        "title_case": false,
        "type": "sortableList",
        "_input_type": "SortableListInput"
      },
      "api_key": {
        "load_from_db": true,
        "required": true,
        "placeholder": "",
        "show": true,
        "name": "api_key",
        "value": "",
        "display_name": "Composio API Key",
        "advanced": false,
        "input_types": [],
        "dynamic": false,
        "info": "Refer to https://docs.composio.dev/faq/api_key/api_key",
        "real_time_refresh": true,
        "title_case": false,
        "password": true,
        "type": "str",
        "_input_type": "SecretStrInput"
      },
      "code": {
        "type": "code",
        "required": true,
        "placeholder": "",
        "list": false,
        "show": true,
        "multiline": true,
        "value": "# Standard library imports\nfrom collections.abc import Sequence\nfrom typing import Any\n\nfrom composio import Action, App\n\n# Third-party imports\nfrom composio_langchain import ComposioToolSet\nfrom langchain_core.tools import Tool\n\n# Local imports\nfrom langflow.base.langchain_utilities.model import LCToolComponent\nfrom langflow.inputs import (\n    ConnectionInput,\n    MessageTextInput,\n    SecretStrInput,\n    SortableListInput,\n)\nfrom langflow.io import Output\n\n# TODO: We get the list from the API but we need to filter it\nenabled_tools = [\"confluence\", \"discord\", \"dropbox\", \"github\", \"gmail\", \"linkedin\", \"notion\", \"slack\", \"youtube\"]\n\n\nclass ComposioAPIComponent(LCToolComponent):\n    display_name: str = \"Composio Tools\"\n    description: str = \"Use Composio toolset to run actions with your agent\"\n    name = \"ComposioAPI\"\n    icon = \"Composio\"\n    documentation: str = \"https://docs.composio.dev\"\n\n    inputs = [\n        # Basic configuration inputs\n        MessageTextInput(name=\"entity_id\", display_name=\"Entity ID\", value=\"default\", advanced=True),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Composio API Key\",\n            required=True,\n            info=\"Refer to https://docs.composio.dev/faq/api_key/api_key\",\n            real_time_refresh=True,\n        ),\n        ConnectionInput(\n            name=\"tool_name\",\n            display_name=\"Tool Name\",\n            placeholder=\"Select a tool...\",\n            button_metadata={\"icon\": \"unplug\", \"variant\": \"destructive\"},\n            options=[],\n            search_category=[],\n            value=\"\",\n            connection_link=\"\",\n            info=\"The name of the tool to use\",\n            real_time_refresh=True,\n        ),\n        SortableListInput(\n            name=\"actions\",\n            display_name=\"Actions\",\n            placeholder=\"Select action\",\n            helper_text=\"Please connect before selecting actions.\",\n            helper_text_metadata={\"icon\": \"OctagonAlert\", \"variant\": \"destructive\"},\n            options=[],\n            value=\"\",\n            info=\"The actions to use\",\n            limit=1,\n            show=False,\n        ),\n    ]\n\n    outputs = [\n        Output(name=\"tools\", display_name=\"Tools\", method=\"build_tool\"),\n    ]\n\n    def sanitize_action_name(self, action_name: str) -> str:\n        # TODO: Maybe restore\n        return action_name\n\n        # We want to use title case, and replace underscores with spaces\n        sanitized_name = action_name.replace(\"_\", \" \").title()\n\n        # Now we want to remove everything from and including the first dot\n        return sanitized_name.replace(self.tool_name.title() + \" \", \"\")\n\n    def desanitize_action_name(self, action_name: str) -> str:\n        # TODO: Maybe restore\n        return action_name\n\n        # We want to reverse what we did above\n        unsanitized_name = action_name.replace(\" \", \"_\").upper()\n\n        # Append the tool_name to it at the beginning, followed by a dot, in all CAPS\n        return f\"{self.tool_name.upper()}_{unsanitized_name}\"\n\n    def validate_tool(self, build_config: dict, field_value: Any, connected_app_names: list) -> dict:\n        # Get the index of the selected tool in the list of options\n        selected_tool_index = next(\n            (\n                ind\n                for ind, tool in enumerate(build_config[\"tool_name\"][\"options\"])\n                if tool[\"name\"] == field_value\n                or (\"validate\" in field_value and tool[\"name\"] == field_value[\"validate\"])\n            ),\n            None,\n        )\n\n        # Set the link to be the text 'validated'\n        build_config[\"tool_name\"][\"options\"][selected_tool_index][\"link\"] = \"validated\"\n\n        # Set the helper text and helper text metadata field of the actions now\n        build_config[\"actions\"][\"helper_text\"] = \"\"\n        build_config[\"actions\"][\"helper_text_metadata\"] = {\"icon\": \"Check\", \"variant\": \"success\"}\n\n        # Get the list of actions available\n        all_actions = list(Action.all())\n        authenticated_actions = sorted(\n            [\n                action\n                for action in all_actions\n                if action.app.lower() in list(connected_app_names) and action.app.lower() == self.tool_name.lower()\n            ],\n            key=lambda x: x.name,\n        )\n\n        # Return the list of action names\n        build_config[\"actions\"][\"options\"] = [\n            {\n                \"name\": self.sanitize_action_name(action.name),\n            }\n            for action in authenticated_actions\n        ]\n\n        # Lastly, we need to show the actions field\n        build_config[\"actions\"][\"show\"] = True\n\n        return build_config\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:\n        # If the list of tools is not available, always update it\n        if field_name == \"api_key\" or (self.api_key and not build_config[\"tool_name\"][\"options\"]):\n            if field_name == \"api_key\" and not field_value:\n                # Reset the list of tools\n                build_config[\"tool_name\"][\"options\"] = []\n                build_config[\"tool_name\"][\"value\"] = \"\"\n\n                # Reset the list of actions\n                build_config[\"actions\"][\"show\"] = False\n                build_config[\"actions\"][\"options\"] = []\n                build_config[\"actions\"][\"value\"] = \"\"\n\n                return build_config\n\n            # TODO: Re-enable dynamic tool list\n            # Initialize the Composio ToolSet with your API key\n            # toolset = ComposioToolSet(api_key=self.api_key)\n\n            # Get the entity (e.g., \"default\" for your user)\n            # entity = toolset.get_entity(self.entity_id)\n\n            # Get all available apps\n            # all_apps = entity.client.apps.get()\n\n            # Build an object with name, icon, link\n            build_config[\"tool_name\"][\"options\"] = [\n                {\n                    \"name\": app.title(),  # TODO: Switch to app.name\n                    \"icon\": app,  # TODO: Switch to app.name\n                    \"link\": (\n                        build_config[\"tool_name\"][\"options\"][ind][\"link\"]\n                        if build_config[\"tool_name\"][\"options\"]\n                        else \"\"\n                    ),\n                }\n                # for app in sorted(all_apps, key=lambda x: x.name)\n                for ind, app in enumerate(enabled_tools)\n            ]\n\n            return build_config\n\n        # Handle the click of the Tool Name connect button\n        if field_name == \"tool_name\" and field_value:\n            # Get the list of apps (tools) we have connected\n            toolset = ComposioToolSet(api_key=self.api_key)\n            connected_apps = [app for app in toolset.get_connected_accounts() if app.status == \"ACTIVE\"]\n\n            # Get the unique list of appName from the connected apps\n            connected_app_names = [app.appName.lower() for app in connected_apps]\n\n            # Clear out the list of selected actions\n            build_config[\"actions\"][\"show\"] = True\n            build_config[\"actions\"][\"options\"] = []\n            build_config[\"actions\"][\"value\"] = \"\"\n\n            # Clear out any helper text\n            build_config[\"tool_name\"][\"helper_text\"] = \"\"\n            build_config[\"tool_name\"][\"helper_text_metadata\"] = {}\n\n            # If it's a dictionary, we need to do validation\n            if isinstance(field_value, dict):\n                # If the current field value is a dictionary, it means the user has selected a tool\n                if \"validate\" not in field_value:\n                    return build_config\n\n                # Check if the selected tool is connected\n                check_app = field_value[\"validate\"].lower()\n\n                # If the tool selected is NOT what we are validating, return the build config\n                if check_app != self.tool_name.lower():\n                    # Set the helper text and helper text metadata field of the actions now\n                    build_config[\"actions\"][\"helper_text\"] = \"Please connect before selecting actions.\"\n                    build_config[\"actions\"][\"helper_text_metadata\"] = {\n                        \"icon\": \"OctagonAlert\",\n                        \"variant\": \"destructive\",\n                    }\n\n                    return build_config\n\n                # Check if the tool is already validated\n                if check_app not in connected_app_names:\n                    return build_config\n\n                # Validate the selected tool\n                return self.validate_tool(build_config, field_value, connected_app_names)\n\n            # Check if the tool is already validated\n            if field_value.lower() in connected_app_names:\n                return self.validate_tool(build_config, field_value, connected_app_names)\n\n            # Get the entity (e.g., \"default\" for your user)\n            entity = toolset.get_entity(id=self.entity_id)\n\n            # Set the metadata for the actions\n            build_config[\"actions\"][\"helper_text_metadata\"] = {\"icon\": \"OctagonAlert\", \"variant\": \"destructive\"}\n\n            # Get the index of the selected tool in the list of options\n            selected_tool_index = next(\n                (ind for ind, tool in enumerate(build_config[\"tool_name\"][\"options\"]) if tool[\"name\"] == field_value),\n                None,\n            )\n\n            # Initiate a GitHub connection and get the redirect URL\n            try:\n                connection_request = entity.initiate_connection(app_name=getattr(App, field_value.upper()))\n            except Exception as _:  # noqa: BLE001\n                # Indicate that there was an error connecting to the tool\n                build_config[\"tool_name\"][\"options\"][selected_tool_index][\"link\"] = \"error\"\n                build_config[\"tool_name\"][\"helper_text\"] = f\"Error connecting to {field_value}\"\n                build_config[\"tool_name\"][\"helper_text_metadata\"] = {\n                    \"icon\": \"OctagonAlert\",\n                    \"variant\": \"destructive\",\n                }\n\n                return build_config\n\n            # Print the direct HTTP link for authentication\n            build_config[\"tool_name\"][\"options\"][selected_tool_index][\"link\"] = connection_request.redirectUrl\n\n            # Set the helper text and helper text metadata field of the actions now\n            build_config[\"actions\"][\"helper_text\"] = \"Please connect before selecting actions.\"\n\n        return build_config\n\n    def build_tool(self) -> Sequence[Tool]:\n        \"\"\"Build Composio tools based on selected actions.\n\n        Returns:\n            Sequence[Tool]: List of configured Composio tools.\n        \"\"\"\n        composio_toolset = self._build_wrapper()\n        return composio_toolset.get_tools(\n            actions=[self.desanitize_action_name(action[\"name\"]) for action in self.actions]\n        )\n\n    def _build_wrapper(self) -> ComposioToolSet:\n        \"\"\"Build the Composio toolset wrapper.\n\n        Returns:\n            ComposioToolSet: The initialized toolset.\n\n        Raises:\n            ValueError: If the API key is not found or invalid.\n        \"\"\"\n        try:\n            if not self.api_key:\n                msg = \"Composio API Key is required\"\n                raise ValueError(msg)\n            return ComposioToolSet(api_key=self.api_key, entity_id=self.entity_id)\n        except ValueError as e:\n            self.log(f\"Error building Composio wrapper: {e}\")\n            msg = \"Please provide a valid Composio API Key in the component settings\"\n            raise ValueError(msg) from e\n",
        "fileTypes": [],
        "file_path": "",
        "password": false,
        "name": "code",
        "advanced": true,
        "dynamic": true,
        "info": "",
        "load_from_db": false,
        "title_case": false
      },
      "entity_id": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "entity_id",
        "value": "default",
        "display_name": "Entity ID",
        "advanced": true,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "tool_name": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "connection_link": "",
        "button_metadata": {
          "icon": "unplug",
          "variant": "destructive"
        },
        "search_category": [],
        "options": [],
        "required": false,
        "placeholder": "Select a tool...",
        "show": true,
        "name": "tool_name",
        "value": "",
        "display_name": "Tool Name",
        "advanced": false,
        "dynamic": false,
        "info": "The name of the tool to use",
        "real_time_refresh": true,
        "title_case": false,
        "type": "connect",
        "_input_type": "ConnectionInput"
      }
    },
    "description": "Use Composio toolset to run actions with your agent",
    "icon": "Composio",
    "base_classes": [
      "Tool"
    ],
    "display_name": "Composio Tools",
    "documentation": "https://docs.composio.dev",
    "minimized": false,
    "custom_fields": {},
    "output_types": [],
    "pinned": false,
    "conditional_paths": [],
    "frozen": false,
    "outputs": [
      {
        "types": [
          "Tool"
        ],
        "selected": "Tool",
        "name": "tools",
        "display_name": "Tools",
        "method": "build_tool",
        "value": "__UNDEFINED__",
        "cache": true,
        "allows_loop": false,
        "tool_mode": true
      }
    ],
    "field_order": [
      "entity_id",
      "api_key",
      "tool_name",
      "actions"
    ],
    "beta": false,
    "legacy": false,
    "edited": false,
    "metadata": {},
    "tool_mode": false
  }
}
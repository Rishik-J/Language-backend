{
  "AmazonBedrockEmbeddings": {
    "template": {
      "_type": "Component",
      "aws_access_key_id": {
        "load_from_db": true,
        "required": true,
        "placeholder": "",
        "show": true,
        "name": "aws_access_key_id",
        "value": "AWS_ACCESS_KEY_ID",
        "display_name": "AWS Access Key ID",
        "advanced": false,
        "input_types": [],
        "dynamic": false,
        "info": "The access key for your AWS account.Usually set in Python code as the environment variable 'AWS_ACCESS_KEY_ID'.",
        "title_case": false,
        "password": true,
        "type": "str",
        "_input_type": "SecretStrInput"
      },
      "aws_secret_access_key": {
        "load_from_db": true,
        "required": true,
        "placeholder": "",
        "show": true,
        "name": "aws_secret_access_key",
        "value": "AWS_SECRET_ACCESS_KEY",
        "display_name": "AWS Secret Access Key",
        "advanced": false,
        "input_types": [],
        "dynamic": false,
        "info": "The secret key for your AWS account. Usually set in Python code as the environment variable 'AWS_SECRET_ACCESS_KEY'.",
        "title_case": false,
        "password": true,
        "type": "str",
        "_input_type": "SecretStrInput"
      },
      "aws_session_token": {
        "load_from_db": true,
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "aws_session_token",
        "value": "AWS_SESSION_TOKEN",
        "display_name": "AWS Session Token",
        "advanced": false,
        "input_types": [],
        "dynamic": false,
        "info": "The session key for your AWS account. Only needed for temporary credentials. Usually set in Python code as the environment variable 'AWS_SESSION_TOKEN'.",
        "title_case": false,
        "password": true,
        "type": "str",
        "_input_type": "SecretStrInput"
      },
      "code": {
        "type": "code",
        "required": true,
        "placeholder": "",
        "list": false,
        "show": true,
        "multiline": true,
        "value": "from langflow.base.models.aws_constants import AWS_EMBEDDING_MODEL_IDS, AWS_REGIONS\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import Embeddings\nfrom langflow.inputs import SecretStrInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\n\n\nclass AmazonBedrockEmbeddingsComponent(LCModelComponent):\n    display_name: str = \"Amazon Bedrock Embeddings\"\n    description: str = \"Generate embeddings using Amazon Bedrock models.\"\n    icon = \"Amazon\"\n    name = \"AmazonBedrockEmbeddings\"\n\n    inputs = [\n        DropdownInput(\n            name=\"model_id\",\n            display_name=\"Model Id\",\n            options=AWS_EMBEDDING_MODEL_IDS,\n            value=\"amazon.titan-embed-text-v1\",\n        ),\n        SecretStrInput(\n            name=\"aws_access_key_id\",\n            display_name=\"AWS Access Key ID\",\n            info=\"The access key for your AWS account.\"\n            \"Usually set in Python code as the environment variable 'AWS_ACCESS_KEY_ID'.\",\n            value=\"AWS_ACCESS_KEY_ID\",\n            required=True,\n        ),\n        SecretStrInput(\n            name=\"aws_secret_access_key\",\n            display_name=\"AWS Secret Access Key\",\n            info=\"The secret key for your AWS account. \"\n            \"Usually set in Python code as the environment variable 'AWS_SECRET_ACCESS_KEY'.\",\n            value=\"AWS_SECRET_ACCESS_KEY\",\n            required=True,\n        ),\n        SecretStrInput(\n            name=\"aws_session_token\",\n            display_name=\"AWS Session Token\",\n            advanced=False,\n            info=\"The session key for your AWS account. \"\n            \"Only needed for temporary credentials. \"\n            \"Usually set in Python code as the environment variable 'AWS_SESSION_TOKEN'.\",\n            value=\"AWS_SESSION_TOKEN\",\n        ),\n        SecretStrInput(\n            name=\"credentials_profile_name\",\n            display_name=\"Credentials Profile Name\",\n            advanced=True,\n            info=\"The name of the profile to use from your \"\n            \"~/.aws/credentials file. \"\n            \"If not provided, the default profile will be used.\",\n            value=\"AWS_CREDENTIALS_PROFILE_NAME\",\n        ),\n        DropdownInput(\n            name=\"region_name\",\n            display_name=\"Region Name\",\n            value=\"us-east-1\",\n            options=AWS_REGIONS,\n            info=\"The AWS region where your Bedrock resources are located.\",\n        ),\n        MessageTextInput(\n            name=\"endpoint_url\",\n            display_name=\"Endpoint URL\",\n            advanced=True,\n            info=\"The URL of the AWS Bedrock endpoint to use.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Embeddings\", name=\"embeddings\", method=\"build_embeddings\"),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        try:\n            from langchain_aws import BedrockEmbeddings\n        except ImportError as e:\n            msg = \"langchain_aws is not installed. Please install it with `pip install langchain_aws`.\"\n            raise ImportError(msg) from e\n        try:\n            import boto3\n        except ImportError as e:\n            msg = \"boto3 is not installed. Please install it with `pip install boto3`.\"\n            raise ImportError(msg) from e\n        if self.aws_access_key_id or self.aws_secret_access_key:\n            session = boto3.Session(\n                aws_access_key_id=self.aws_access_key_id,\n                aws_secret_access_key=self.aws_secret_access_key,\n                aws_session_token=self.aws_session_token,\n            )\n        elif self.credentials_profile_name:\n            session = boto3.Session(profile_name=self.credentials_profile_name)\n        else:\n            session = boto3.Session()\n\n        client_params = {}\n        if self.endpoint_url:\n            client_params[\"endpoint_url\"] = self.endpoint_url\n        if self.region_name:\n            client_params[\"region_name\"] = self.region_name\n\n        boto3_client = session.client(\"bedrock-runtime\", **client_params)\n        return BedrockEmbeddings(\n            credentials_profile_name=self.credentials_profile_name,\n            client=boto3_client,\n            model_id=self.model_id,\n            endpoint_url=self.endpoint_url,\n            region_name=self.region_name,\n        )\n",
        "fileTypes": [],
        "file_path": "",
        "password": false,
        "name": "code",
        "advanced": true,
        "dynamic": true,
        "info": "",
        "load_from_db": false,
        "title_case": false
      },
      "credentials_profile_name": {
        "load_from_db": true,
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "credentials_profile_name",
        "value": "AWS_CREDENTIALS_PROFILE_NAME",
        "display_name": "Credentials Profile Name",
        "advanced": true,
        "input_types": [],
        "dynamic": false,
        "info": "The name of the profile to use from your ~/.aws/credentials file. If not provided, the default profile will be used.",
        "title_case": false,
        "password": true,
        "type": "str",
        "_input_type": "SecretStrInput"
      },
      "endpoint_url": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "endpoint_url",
        "value": "",
        "display_name": "Endpoint URL",
        "advanced": true,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "The URL of the AWS Bedrock endpoint to use.",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "model_id": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "options": [
          "amazon.titan-embed-text-v1",
          "amazon.titan-embed-text-v2:0",
          "cohere.embed-english-v3",
          "cohere.embed-multilingual-v3"
        ],
        "options_metadata": [],
        "combobox": false,
        "dialog_inputs": {},
        "toggle": false,
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "model_id",
        "value": "amazon.titan-embed-text-v1",
        "display_name": "Model Id",
        "advanced": false,
        "dynamic": false,
        "info": "",
        "title_case": false,
        "type": "str",
        "_input_type": "DropdownInput"
      },
      "region_name": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "options": [
          "us-west-2",
          "us-west-1",
          "us-gov-west-1",
          "us-gov-east-1",
          "us-east-2",
          "us-east-1",
          "sa-east-1",
          "me-south-1",
          "me-central-1",
          "il-central-1",
          "eu-west-3",
          "eu-west-2",
          "eu-west-1",
          "eu-south-2",
          "eu-south-1",
          "eu-north-1",
          "eu-central-2",
          "eu-central-1",
          "cn-northwest-1",
          "cn-north-1",
          "ca-west-1",
          "ca-central-1",
          "ap-southeast-5",
          "ap-southeast-4",
          "ap-southeast-3",
          "ap-southeast-2",
          "ap-southeast-1",
          "ap-south-2",
          "ap-south-1",
          "ap-northeast-3",
          "ap-northeast-2",
          "ap-northeast-1",
          "ap-east-1",
          "af-south-1"
        ],
        "options_metadata": [],
        "combobox": false,
        "dialog_inputs": {},
        "toggle": false,
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "region_name",
        "value": "us-east-1",
        "display_name": "Region Name",
        "advanced": false,
        "dynamic": false,
        "info": "The AWS region where your Bedrock resources are located.",
        "title_case": false,
        "type": "str",
        "_input_type": "DropdownInput"
      }
    },
    "description": "Generate embeddings using Amazon Bedrock models.",
    "icon": "Amazon",
    "base_classes": [
      "Embeddings"
    ],
    "display_name": "Amazon Bedrock Embeddings",
    "documentation": "",
    "minimized": false,
    "custom_fields": {},
    "output_types": [],
    "pinned": false,
    "conditional_paths": [],
    "frozen": false,
    "outputs": [
      {
        "types": [
          "Embeddings"
        ],
        "selected": "Embeddings",
        "name": "embeddings",
        "display_name": "Embeddings",
        "method": "build_embeddings",
        "value": "__UNDEFINED__",
        "cache": true,
        "allows_loop": false,
        "tool_mode": true
      }
    ],
    "field_order": [
      "model_id",
      "aws_access_key_id",
      "aws_secret_access_key",
      "aws_session_token",
      "credentials_profile_name",
      "region_name",
      "endpoint_url"
    ],
    "beta": false,
    "legacy": false,
    "edited": false,
    "metadata": {},
    "tool_mode": false
  },
  "s3bucketuploader": {
    "template": {
      "_type": "Component",
      "data_inputs": {
        "trace_as_metadata": true,
        "list": true,
        "list_add_label": "Add More",
        "required": true,
        "placeholder": "",
        "show": true,
        "name": "data_inputs",
        "value": "",
        "display_name": "Data Inputs",
        "advanced": false,
        "input_types": [
          "Data"
        ],
        "dynamic": false,
        "info": "The data to split.",
        "title_case": false,
        "type": "other",
        "_input_type": "HandleInput"
      },
      "aws_access_key_id": {
        "load_from_db": true,
        "required": true,
        "placeholder": "",
        "show": true,
        "name": "aws_access_key_id",
        "value": "",
        "display_name": "AWS Access Key ID",
        "advanced": false,
        "input_types": [],
        "dynamic": false,
        "info": "AWS Access key ID.",
        "title_case": false,
        "password": true,
        "type": "str",
        "_input_type": "SecretStrInput"
      },
      "aws_secret_access_key": {
        "load_from_db": true,
        "required": true,
        "placeholder": "",
        "show": true,
        "name": "aws_secret_access_key",
        "value": "",
        "display_name": "AWS Secret Key",
        "advanced": false,
        "input_types": [],
        "dynamic": false,
        "info": "AWS Secret Key.",
        "title_case": false,
        "password": true,
        "type": "str",
        "_input_type": "SecretStrInput"
      },
      "bucket_name": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "bucket_name",
        "value": "",
        "display_name": "Bucket Name",
        "advanced": false,
        "dynamic": false,
        "info": "Enter the name of the bucket.",
        "title_case": false,
        "type": "str",
        "_input_type": "StrInput"
      },
      "code": {
        "type": "code",
        "required": true,
        "placeholder": "",
        "list": false,
        "show": true,
        "multiline": true,
        "value": "from pathlib import Path\nfrom typing import Any\n\nimport boto3\n\nfrom langflow.custom import Component\nfrom langflow.io import (\n    BoolInput,\n    DropdownInput,\n    HandleInput,\n    Output,\n    SecretStrInput,\n    StrInput,\n)\n\n\nclass S3BucketUploaderComponent(Component):\n    \"\"\"S3BucketUploaderComponent is a component responsible for uploading files to an S3 bucket.\n\n    It provides two strategies for file upload: \"By Data\" and \"By File Name\". The component\n    requires AWS credentials and bucket details as inputs and processes files accordingly.\n\n    Attributes:\n        display_name (str): The display name of the component.\n        description (str): A brief description of the components functionality.\n        icon (str): The icon representing the component.\n        name (str): The internal name of the component.\n        inputs (list): A list of input configurations required by the component.\n        outputs (list): A list of output configurations provided by the component.\n\n    Methods:\n        process_files() -> None:\n            Processes files based on the selected strategy. Calls the appropriate method\n            based on the strategy attribute.\n        process_files_by_data() -> None:\n            Processes and uploads files to an S3 bucket based on the data inputs. Iterates\n            over the data inputs, logs the file path and text content, and uploads each file\n            to the specified S3 bucket if both file path and text content are available.\n        process_files_by_name() -> None:\n            Processes and uploads files to an S3 bucket based on their names. Iterates through\n            the list of data inputs, retrieves the file path from each data item, and uploads\n            the file to the specified S3 bucket if the file path is available. Logs the file\n            path being uploaded.\n        _s3_client() -> Any:\n            Creates and returns an S3 client using the provided AWS access key ID and secret\n            access key.\n\n        Please note that this component requires the boto3 library to be installed. It is designed\n        to work with File and Director components as inputs\n    \"\"\"\n\n    display_name = \"S3 Bucket Uploader\"\n    description = \"Uploads files to S3 bucket.\"\n    icon = \"Amazon\"\n    name = \"s3bucketuploader\"\n\n    inputs = [\n        SecretStrInput(\n            name=\"aws_access_key_id\",\n            display_name=\"AWS Access Key ID\",\n            required=True,\n            password=True,\n            info=\"AWS Access key ID.\",\n        ),\n        SecretStrInput(\n            name=\"aws_secret_access_key\",\n            display_name=\"AWS Secret Key\",\n            required=True,\n            password=True,\n            info=\"AWS Secret Key.\",\n        ),\n        StrInput(\n            name=\"bucket_name\",\n            display_name=\"Bucket Name\",\n            info=\"Enter the name of the bucket.\",\n            advanced=False,\n        ),\n        DropdownInput(\n            name=\"strategy\",\n            display_name=\"Strategy for file upload\",\n            options=[\"Store Data\", \"Store Original File\"],\n            value=\"By Data\",\n            info=(\n                \"Choose the strategy to upload the file. By Data means that the source file \"\n                \"is parsed and stored as LangFlow data. By File Name means that the source \"\n                \"file is uploaded as is.\"\n            ),\n        ),\n        HandleInput(\n            name=\"data_inputs\",\n            display_name=\"Data Inputs\",\n            info=\"The data to split.\",\n            input_types=[\"Data\"],\n            is_list=True,\n            required=True,\n        ),\n        StrInput(\n            name=\"s3_prefix\",\n            display_name=\"S3 Prefix\",\n            info=\"Prefix for all files.\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"strip_path\",\n            display_name=\"Strip Path\",\n            info=\"Removes path from file path.\",\n            required=True,\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Writes to AWS Bucket\", name=\"data\", method=\"process_files\"),\n    ]\n\n    def process_files(self) -> None:\n        \"\"\"Process files based on the selected strategy.\n\n        This method uses a strategy pattern to process files. The strategy is determined\n        by the `self.strategy` attribute, which can be either \"By Data\" or \"By File Name\".\n        Depending on the strategy, the corresponding method (`process_files_by_data` or\n        `process_files_by_name`) is called. If an invalid strategy is provided, an error\n        is logged.\n\n        Returns:\n            None\n        \"\"\"\n        strategy_methods = {\n            \"Store Data\": self.process_files_by_data,\n            \"Store Original File\": self.process_files_by_name,\n        }\n        strategy_methods.get(self.strategy, lambda: self.log(\"Invalid strategy\"))()\n\n    def process_files_by_data(self) -> None:\n        \"\"\"Processes and uploads files to an S3 bucket based on the data inputs.\n\n        This method iterates over the data inputs, logs the file path and text content,\n        and uploads each file to the specified S3 bucket if both file path and text content\n        are available.\n\n        Args:\n            None\n\n        Returns:\n            None\n        \"\"\"\n        for data_item in self.data_inputs:\n            file_path = data_item.data.get(\"file_path\")\n            text_content = data_item.data.get(\"text\")\n\n            if file_path and text_content:\n                self._s3_client().put_object(\n                    Bucket=self.bucket_name, Key=self._normalize_path(file_path), Body=text_content\n                )\n\n    def process_files_by_name(self) -> None:\n        \"\"\"Processes and uploads files to an S3 bucket based on their names.\n\n        Iterates through the list of data inputs, retrieves the file path from each data item,\n        and uploads the file to the specified S3 bucket if the file path is available.\n        Logs the file path being uploaded.\n\n        Returns:\n            None\n        \"\"\"\n        for data_item in self.data_inputs:\n            file_path = data_item.data.get(\"file_path\")\n            self.log(f\"Uploading file: {file_path}\")\n            if file_path:\n                self._s3_client().upload_file(file_path, Bucket=self.bucket_name, Key=self._normalize_path(file_path))\n\n    def _s3_client(self) -> Any:\n        \"\"\"Creates and returns an S3 client using the provided AWS access key ID and secret access key.\n\n        Returns:\n            Any: A boto3 S3 client instance.\n        \"\"\"\n        return boto3.client(\n            \"s3\",\n            aws_access_key_id=self.aws_access_key_id,\n            aws_secret_access_key=self.aws_secret_access_key,\n        )\n\n    def _normalize_path(self, file_path) -> str:\n        \"\"\"Process the file path based on the s3_prefix and path_as_prefix.\n\n        Args:\n            file_path (str): The original file path.\n            s3_prefix (str): The S3 prefix to use.\n            path_as_prefix (bool): Whether to use the file path as the S3 prefix.\n\n        Returns:\n            str: The processed file path.\n        \"\"\"\n        prefix = self.s3_prefix\n        strip_path = self.strip_path\n        processed_path: str = file_path\n\n        if strip_path:\n            # Filename only\n            processed_path = Path(file_path).name\n\n        # Concatenate the s3_prefix if it exists\n        if prefix:\n            processed_path = str(Path(prefix) / processed_path)\n\n        return processed_path\n",
        "fileTypes": [],
        "file_path": "",
        "password": false,
        "name": "code",
        "advanced": true,
        "dynamic": true,
        "info": "",
        "load_from_db": false,
        "title_case": false
      },
      "s3_prefix": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "s3_prefix",
        "value": "",
        "display_name": "S3 Prefix",
        "advanced": true,
        "dynamic": false,
        "info": "Prefix for all files.",
        "title_case": false,
        "type": "str",
        "_input_type": "StrInput"
      },
      "strategy": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "options": [
          "Store Data",
          "Store Original File"
        ],
        "options_metadata": [],
        "combobox": false,
        "dialog_inputs": {},
        "toggle": false,
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "strategy",
        "value": "By Data",
        "display_name": "Strategy for file upload",
        "advanced": false,
        "dynamic": false,
        "info": "Choose the strategy to upload the file. By Data means that the source file is parsed and stored as LangFlow data. By File Name means that the source file is uploaded as is.",
        "title_case": false,
        "type": "str",
        "_input_type": "DropdownInput"
      },
      "strip_path": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "list": false,
        "list_add_label": "Add More",
        "required": true,
        "placeholder": "",
        "show": true,
        "name": "strip_path",
        "value": false,
        "display_name": "Strip Path",
        "advanced": true,
        "dynamic": false,
        "info": "Removes path from file path.",
        "title_case": false,
        "type": "bool",
        "_input_type": "BoolInput"
      }
    },
    "description": "Uploads files to S3 bucket.",
    "icon": "Amazon",
    "base_classes": [
      "NoneType"
    ],
    "display_name": "S3 Bucket Uploader",
    "documentation": "",
    "minimized": false,
    "custom_fields": {},
    "output_types": [],
    "pinned": false,
    "conditional_paths": [],
    "frozen": false,
    "outputs": [
      {
        "types": [
          "NoneType"
        ],
        "selected": "NoneType",
        "name": "data",
        "display_name": "Writes to AWS Bucket",
        "method": "process_files",
        "value": "__UNDEFINED__",
        "cache": true,
        "allows_loop": false,
        "tool_mode": true
      }
    ],
    "field_order": [
      "aws_access_key_id",
      "aws_secret_access_key",
      "bucket_name",
      "strategy",
      "data_inputs",
      "s3_prefix",
      "strip_path"
    ],
    "beta": false,
    "legacy": false,
    "edited": false,
    "metadata": {},
    "tool_mode": false
  },
  "AmazonBedrockModel": {
    "template": {
      "_type": "Component",
      "aws_access_key_id": {
        "load_from_db": true,
        "required": true,
        "placeholder": "",
        "show": true,
        "name": "aws_access_key_id",
        "value": "AWS_ACCESS_KEY_ID",
        "display_name": "AWS Access Key ID",
        "advanced": false,
        "input_types": [],
        "dynamic": false,
        "info": "The access key for your AWS account.Usually set in Python code as the environment variable 'AWS_ACCESS_KEY_ID'.",
        "title_case": false,
        "password": true,
        "type": "str",
        "_input_type": "SecretStrInput"
      },
      "aws_secret_access_key": {
        "load_from_db": true,
        "required": true,
        "placeholder": "",
        "show": true,
        "name": "aws_secret_access_key",
        "value": "AWS_SECRET_ACCESS_KEY",
        "display_name": "AWS Secret Access Key",
        "advanced": false,
        "input_types": [],
        "dynamic": false,
        "info": "The secret key for your AWS account. Usually set in Python code as the environment variable 'AWS_SECRET_ACCESS_KEY'.",
        "title_case": false,
        "password": true,
        "type": "str",
        "_input_type": "SecretStrInput"
      },
      "aws_session_token": {
        "load_from_db": false,
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "aws_session_token",
        "value": "",
        "display_name": "AWS Session Token",
        "advanced": false,
        "input_types": [],
        "dynamic": false,
        "info": "The session key for your AWS account. Only needed for temporary credentials. Usually set in Python code as the environment variable 'AWS_SESSION_TOKEN'.",
        "title_case": false,
        "password": true,
        "type": "str",
        "_input_type": "SecretStrInput"
      },
      "code": {
        "type": "code",
        "required": true,
        "placeholder": "",
        "list": false,
        "show": true,
        "multiline": true,
        "value": "from langflow.base.models.aws_constants import AWS_REGIONS, AWS_MODEL_IDs\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import LanguageModel\nfrom langflow.inputs import MessageTextInput, SecretStrInput\nfrom langflow.io import DictInput, DropdownInput\n\n\nclass AmazonBedrockComponent(LCModelComponent):\n    display_name: str = \"Amazon Bedrock\"\n    description: str = \"Generate text using Amazon Bedrock LLMs.\"\n    icon = \"Amazon\"\n    name = \"AmazonBedrockModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        DropdownInput(\n            name=\"model_id\",\n            display_name=\"Model ID\",\n            options=AWS_MODEL_IDs,\n            value=\"anthropic.claude-3-haiku-20240307-v1:0\",\n            info=\"List of available model IDs to choose from.\",\n        ),\n        SecretStrInput(\n            name=\"aws_access_key_id\",\n            display_name=\"AWS Access Key ID\",\n            info=\"The access key for your AWS account.\"\n            \"Usually set in Python code as the environment variable 'AWS_ACCESS_KEY_ID'.\",\n            value=\"AWS_ACCESS_KEY_ID\",\n            required=True,\n        ),\n        SecretStrInput(\n            name=\"aws_secret_access_key\",\n            display_name=\"AWS Secret Access Key\",\n            info=\"The secret key for your AWS account. \"\n            \"Usually set in Python code as the environment variable 'AWS_SECRET_ACCESS_KEY'.\",\n            value=\"AWS_SECRET_ACCESS_KEY\",\n            required=True,\n        ),\n        SecretStrInput(\n            name=\"aws_session_token\",\n            display_name=\"AWS Session Token\",\n            advanced=False,\n            info=\"The session key for your AWS account. \"\n            \"Only needed for temporary credentials. \"\n            \"Usually set in Python code as the environment variable 'AWS_SESSION_TOKEN'.\",\n            load_from_db=False,\n        ),\n        SecretStrInput(\n            name=\"credentials_profile_name\",\n            display_name=\"Credentials Profile Name\",\n            advanced=True,\n            info=\"The name of the profile to use from your \"\n            \"~/.aws/credentials file. \"\n            \"If not provided, the default profile will be used.\",\n            load_from_db=False,\n        ),\n        DropdownInput(\n            name=\"region_name\",\n            display_name=\"Region Name\",\n            value=\"us-east-1\",\n            options=AWS_REGIONS,\n            info=\"The AWS region where your Bedrock resources are located.\",\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            is_list=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        MessageTextInput(\n            name=\"endpoint_url\",\n            display_name=\"Endpoint URL\",\n            advanced=True,\n            info=\"The URL of the Bedrock endpoint to use.\",\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        try:\n            from langchain_aws import ChatBedrock\n        except ImportError as e:\n            msg = \"langchain_aws is not installed. Please install it with `pip install langchain_aws`.\"\n            raise ImportError(msg) from e\n        try:\n            import boto3\n        except ImportError as e:\n            msg = \"boto3 is not installed. Please install it with `pip install boto3`.\"\n            raise ImportError(msg) from e\n        if self.aws_access_key_id or self.aws_secret_access_key:\n            try:\n                session = boto3.Session(\n                    aws_access_key_id=self.aws_access_key_id,\n                    aws_secret_access_key=self.aws_secret_access_key,\n                    aws_session_token=self.aws_session_token,\n                )\n            except Exception as e:\n                msg = \"Could not create a boto3 session.\"\n                raise ValueError(msg) from e\n        elif self.credentials_profile_name:\n            session = boto3.Session(profile_name=self.credentials_profile_name)\n        else:\n            session = boto3.Session()\n\n        client_params = {}\n        if self.endpoint_url:\n            client_params[\"endpoint_url\"] = self.endpoint_url\n        if self.region_name:\n            client_params[\"region_name\"] = self.region_name\n\n        boto3_client = session.client(\"bedrock-runtime\", **client_params)\n        try:\n            output = ChatBedrock(\n                client=boto3_client,\n                model_id=self.model_id,\n                region_name=self.region_name,\n                model_kwargs=self.model_kwargs,\n                endpoint_url=self.endpoint_url,\n                streaming=self.stream,\n            )\n        except Exception as e:\n            msg = \"Could not connect to AmazonBedrock API.\"\n            raise ValueError(msg) from e\n        return output\n",
        "fileTypes": [],
        "file_path": "",
        "password": false,
        "name": "code",
        "advanced": true,
        "dynamic": true,
        "info": "",
        "load_from_db": false,
        "title_case": false
      },
      "credentials_profile_name": {
        "load_from_db": false,
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "credentials_profile_name",
        "value": "",
        "display_name": "Credentials Profile Name",
        "advanced": true,
        "input_types": [],
        "dynamic": false,
        "info": "The name of the profile to use from your ~/.aws/credentials file. If not provided, the default profile will be used.",
        "title_case": false,
        "password": true,
        "type": "str",
        "_input_type": "SecretStrInput"
      },
      "endpoint_url": {
        "tool_mode": false,
        "trace_as_input": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "endpoint_url",
        "value": "",
        "display_name": "Endpoint URL",
        "advanced": true,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "The URL of the Bedrock endpoint to use.",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageTextInput"
      },
      "input_value": {
        "trace_as_input": true,
        "tool_mode": false,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "input_value",
        "value": "",
        "display_name": "Input",
        "advanced": false,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "",
        "title_case": false,
        "type": "str",
        "_input_type": "MessageInput"
      },
      "model_id": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "options": [
          "amazon.titan-text-express-v1",
          "amazon.titan-text-lite-v1",
          "amazon.titan-text-premier-v1:0",
          "anthropic.claude-v2",
          "anthropic.claude-v2:1",
          "anthropic.claude-3-sonnet-20240229-v1:0",
          "anthropic.claude-3-5-sonnet-20240620-v1:0",
          "anthropic.claude-3-5-sonnet-20241022-v2:0",
          "anthropic.claude-3-haiku-20240307-v1:0",
          "anthropic.claude-3-5-haiku-20241022-v1:0",
          "anthropic.claude-3-opus-20240229-v1:0",
          "anthropic.claude-instant-v1",
          "ai21.jamba-instruct-v1:0",
          "ai21.j2-mid-v1",
          "ai21.j2-ultra-v1",
          "ai21.jamba-1-5-large-v1:0",
          "ai21.jamba-1-5-mini-v1:0",
          "cohere.command-text-v14",
          "cohere.command-light-text-v14",
          "cohere.command-r-v1:0",
          "cohere.command-r-plus-v1:0",
          "meta.llama2-13b-chat-v1",
          "meta.llama2-70b-chat-v1",
          "meta.llama3-8b-instruct-v1:0",
          "meta.llama3-70b-instruct-v1:0",
          "meta.llama3-1-8b-instruct-v1:0",
          "meta.llama3-1-70b-instruct-v1:0",
          "meta.llama3-1-405b-instruct-v1:0",
          "meta.llama3-2-1b-instruct-v1:0",
          "meta.llama3-2-3b-instruct-v1:0",
          "meta.llama3-2-11b-instruct-v1:0",
          "meta.llama3-2-90b-instruct-v1:0",
          "mistral.mistral-7b-instruct-v0:2",
          "mistral.mixtral-8x7b-instruct-v0:1",
          "mistral.mistral-large-2402-v1:0",
          "mistral.mistral-large-2407-v1:0",
          "mistral.mistral-small-2402-v1:0"
        ],
        "options_metadata": [],
        "combobox": false,
        "dialog_inputs": {},
        "toggle": false,
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "model_id",
        "value": "anthropic.claude-3-haiku-20240307-v1:0",
        "display_name": "Model ID",
        "advanced": false,
        "dynamic": false,
        "info": "List of available model IDs to choose from.",
        "title_case": false,
        "type": "str",
        "_input_type": "DropdownInput"
      },
      "model_kwargs": {
        "tool_mode": false,
        "trace_as_input": true,
        "list": true,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "model_kwargs",
        "value": {},
        "display_name": "Model Kwargs",
        "advanced": true,
        "dynamic": false,
        "info": "Additional keyword arguments to pass to the model.",
        "title_case": false,
        "type": "dict",
        "_input_type": "DictInput"
      },
      "region_name": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "options": [
          "us-west-2",
          "us-west-1",
          "us-gov-west-1",
          "us-gov-east-1",
          "us-east-2",
          "us-east-1",
          "sa-east-1",
          "me-south-1",
          "me-central-1",
          "il-central-1",
          "eu-west-3",
          "eu-west-2",
          "eu-west-1",
          "eu-south-2",
          "eu-south-1",
          "eu-north-1",
          "eu-central-2",
          "eu-central-1",
          "cn-northwest-1",
          "cn-north-1",
          "ca-west-1",
          "ca-central-1",
          "ap-southeast-5",
          "ap-southeast-4",
          "ap-southeast-3",
          "ap-southeast-2",
          "ap-southeast-1",
          "ap-south-2",
          "ap-south-1",
          "ap-northeast-3",
          "ap-northeast-2",
          "ap-northeast-1",
          "ap-east-1",
          "af-south-1"
        ],
        "options_metadata": [],
        "combobox": false,
        "dialog_inputs": {},
        "toggle": false,
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "region_name",
        "value": "us-east-1",
        "display_name": "Region Name",
        "advanced": false,
        "dynamic": false,
        "info": "The AWS region where your Bedrock resources are located.",
        "title_case": false,
        "type": "str",
        "_input_type": "DropdownInput"
      },
      "stream": {
        "tool_mode": false,
        "trace_as_metadata": true,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "stream",
        "value": false,
        "display_name": "Stream",
        "advanced": true,
        "dynamic": false,
        "info": "Stream the response from the model. Streaming works only in Chat.",
        "title_case": false,
        "type": "bool",
        "_input_type": "BoolInput"
      },
      "system_message": {
        "tool_mode": false,
        "trace_as_input": true,
        "multiline": true,
        "trace_as_metadata": true,
        "load_from_db": false,
        "list": false,
        "list_add_label": "Add More",
        "required": false,
        "placeholder": "",
        "show": true,
        "name": "system_message",
        "value": "",
        "display_name": "System Message",
        "advanced": false,
        "input_types": [
          "Message"
        ],
        "dynamic": false,
        "info": "System message to pass to the model.",
        "title_case": false,
        "copy_field": false,
        "type": "str",
        "_input_type": "MultilineInput"
      }
    },
    "description": "Generate text using Amazon Bedrock LLMs.",
    "icon": "Amazon",
    "base_classes": [
      "LanguageModel",
      "Message"
    ],
    "display_name": "Amazon Bedrock",
    "documentation": "",
    "minimized": false,
    "custom_fields": {},
    "output_types": [],
    "pinned": false,
    "conditional_paths": [],
    "frozen": false,
    "outputs": [
      {
        "types": [
          "Message"
        ],
        "selected": "Message",
        "name": "text_output",
        "display_name": "Message",
        "method": "text_response",
        "value": "__UNDEFINED__",
        "cache": true,
        "required_inputs": [],
        "allows_loop": false,
        "tool_mode": true
      },
      {
        "types": [
          "LanguageModel"
        ],
        "selected": "LanguageModel",
        "name": "model_output",
        "display_name": "Language Model",
        "method": "build_model",
        "value": "__UNDEFINED__",
        "cache": true,
        "required_inputs": [
          "aws_access_key_id",
          "aws_secret_access_key"
        ],
        "allows_loop": false,
        "tool_mode": true
      }
    ],
    "field_order": [
      "input_value",
      "system_message",
      "stream",
      "model_id",
      "aws_access_key_id",
      "aws_secret_access_key",
      "aws_session_token",
      "credentials_profile_name",
      "region_name",
      "model_kwargs",
      "endpoint_url"
    ],
    "beta": false,
    "legacy": false,
    "edited": false,
    "metadata": {},
    "tool_mode": false
  }
}